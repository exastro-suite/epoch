#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#---- epoch-system.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: Namespace
metadata:
  name: epoch-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: epoch-system-crb
subjects:
- kind: ServiceAccount
  name: default
  namespace: epoch-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin

#---- epoch-init-setting-script.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  epoch-init-setting.sh: |
    #!/bin/bash

    echo "[INFO] START: $(basename $0)"

    kubectl get secret epoch-key -n epoch-system &> /dev/null
    if [ $? -ne 0 ]; then
        echo "[INFO] GENERATE epoch-key"
        ENCRYPT_KEY=$(cat /dev/urandom | base64 | fold -w 16 | head -n 1)
        cat <<EOF | kubectl apply -f -
    apiVersion: v1
    kind: Secret
    metadata:
      name: epoch-key
      namespace: epoch-system
    stringData:
      ENCRYPT_KEY: "${ENCRYPT_KEY}"
    EOF
        if [ $? -ne 0 ]; then
            echo "[ERROR] Failed to GENERATE epoch-key"
            exit 1
        fi
    fi

    exit 0
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: epoch-init-setting-script
  namespace: epoch-system

#---- epoch-init-setting.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: batch/v1
kind: Job
metadata:
  name: epoch-init-setting
  namespace: epoch-system
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
      - name: script
        configMap:
          name: epoch-init-setting-script
      containers:
      - name: pv-creator
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        volumeMounts:
        - mountPath: /job-script
          name: script
        command: ["sh", "-c"]
        args:
          - |
            bash /job-script/epoch-init-setting.sh

#---- exastro-platform-authentication-infra.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: Namespace
metadata:
  name: exastro-platform-authentication-infra

#---- host-setting-config.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: host-setting-config
  namespace: epoch-system
data:
  EPOCH_HOSTNAME: ""

#---- proxy-setting.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-setting-config
  namespace: epoch-system
data:
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-setting-config
  namespace: exastro-platform-authentication-infra
data:
  HTTP_PROXY: ""
  HTTPS_PROXY: ""

#---- epoch-system-pv-create-script.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  epoch-pv-creator.sh: |
    #!/bin/bash

    echo "[INFO] START: $(basename $0)"

    SCRIPT_PATH=$(dirname $0)

    kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" &> /dev/null
    if [ $? -ne 0 ]; then
        echo "[ERROR] Not Found Pod : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME} hostname=${HOSTNAME}"
        exit 1
    fi

    WORKER_NODE_NAME=$(kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" -o jsonpath="{.spec.nodeName}")
    echo "WORKER_NODE_NAME:${WORKER_NODE_NAME}"

    if [ -z "${WORKER_NODE_NAME}" ]; then
        echo "[ERROR] Could not get the node name : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    IFS=, PRM_PV_BEFORE_DELETE_ARR=(${PRM_PV_BEFORE_DELETE})
    for PV in "${PRM_PV_BEFORE_DELETE_ARR[@]}"; do
        STATUS=""
        STATUS=$(kubectl get pv "${PV}" -o jsonpath='{.status.phase}')
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ "${STATUS}" = "Released" ]; then
            kubectl delete pv "${PV}"
        fi
    done

    sed -e "s/#WORKER-NODE-NAME#/${WORKER_NODE_NAME}/g" "${SCRIPT_PATH}/${PRM_PV_TEMPLATE}" | \
    kubectl apply -f -
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create Persistent Volume : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    kubectl delete job -n "${PRM_NAMESPACE}" "${PRM_JOBNAME}"
  epoch-system-pv-template.yaml: |+
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: epoch-system-sc
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: epoch-tekton-pipeline-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: epoch-system-sc
      capacity:
        storage: 500Mi
      accessModes:
        - ReadWriteOnce
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/epoch-tekton-pipeline-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: epoch-tekton-pipeline-db
      namespace: epoch-system
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 500Mi
      storageClassName: epoch-system-sc
      volumeMode: Filesystem
      volumeName: epoch-tekton-pipeline-db

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: epoch-rs-cd-result-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: epoch-system-sc
      capacity:
        storage: 4Gi
      accessModes:
        - ReadWriteOnce
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/epoch-rs-cd-result-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: epoch-rs-cd-result-db
      namespace: epoch-system
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi
      storageClassName: epoch-system-sc
      volumeMode: Filesystem
      volumeName: epoch-rs-cd-result-db

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: epoch-tekton-pipelinerun-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: epoch-system-sc
      capacity:
        storage: 4Gi
      accessModes:
        - ReadWriteOnce
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/epoch-tekton-pipelinerun-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: epoch-tekton-pipelinerun-db
      namespace: epoch-system
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi
      storageClassName: epoch-system-sc
      volumeMode: Filesystem
      volumeName: epoch-tekton-pipelinerun-db


    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: epoch-rs-logs-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: epoch-system-sc
      capacity:
        storage: 4Gi
      accessModes:
        - ReadWriteMany
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/epoch-rs-logs-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: epoch-rs-logs-db
      namespace: epoch-system
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 4Gi
      storageClassName: epoch-system-sc
      volumeMode: Filesystem
      volumeName: epoch-rs-logs-db

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: epoch-workspace-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: epoch-system-sc
      capacity:
        storage: 500Mi
      accessModes:
        - ReadWriteMany
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/epoch-workspace-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: epoch-workspace-db
      namespace: epoch-system
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 500Mi
      storageClassName: epoch-system-sc
      volumeMode: Filesystem
      volumeName: epoch-workspace-db

kind: ConfigMap
metadata:
  creationTimestamp: null
  name: epoch-system-pv-create-script
  namespace: epoch-system

#---- epoch-system-pv-create.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: batch/v1
kind: Job
metadata:
  name: epoch-system-pv-create
  namespace: epoch-system
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
      - name: script
        configMap:
          name: epoch-system-pv-create-script
      containers:
      - name: pv-creator
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        env:
        - name: PRM_JOBNAME
          value: epoch-system-pv-create
        - name: PRM_NAMESPACE
          value: epoch-system
        - name: PRM_PV_TEMPLATE
          value: epoch-system-pv-template.yaml
        - name: PRM_PV_BEFORE_DELETE
          value: "epoch-rs-cd-result-db,epoch-rs-logs-db,epoch-tekton-pipeline-db,epoch-tekton-pipelinerun-db,epoch-workspace-db"
        volumeMounts:
        - mountPath: /job-script
          name: script
        command: ["sh", "-c"]
        args:
          - |
            bash /job-script/epoch-pv-creator.sh

#---- epoch-control-api-config.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-api-config
  namespace: epoch-system
data:
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "localhost,127.0.0.1"
  ARGOCD_NO_PROXY: "localhost,127.0.0.1,kurbernetes.default.svc,kurbernetes.default.svc.cluster.local,10.96.0.1,argocd-server,argocd-dex-server,argocd-redis,argocd-repo-server,argocd-server-metrics"
  ARGOCD_HOST: "argocd-server.epoch-workspace.svc"
  ITA_HOST: "it-automation.epoch-workspace.svc"
  ITA_PORT: "8084"
  ITA_WORKER_HOST: "ita-worker.epoch-workspace.svc"
  WEBHOOK_PORT: "30443"
  RS_WORKSPACE_PROTOCOL: "http"
  RS_WORKSPACE_HOST: "epoch-rs-workspace-api"
  RS_WORKSPACE_PORT: "8000"

#---- epoch-control-workspace-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-workspace-conf
  namespace: epoch-system
data:
  api_workspace.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-workspace-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-workspace-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-workspace-api
    spec:
      volumes:
      - name: epoch-control-workspace-conf
        configMap:
          name: epoch-control-workspace-conf
      containers:
      - name: epoch-control-workspace-api
        image: exastro/epoch-control-workspace-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_WORKSPACE_PATH
          value: "/etc/epoch/epochControlWorkspaceApi/api_workspace.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_WORKSPACE_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_RS_WORKSPACE_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_PROTOCOL
        - name: EPOCH_RS_WORKSPACE_HOST
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_HOST
        - name: EPOCH_RS_WORKSPACE_PORT
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_PORT
        volumeMounts:
        - name: epoch-control-workspace-conf
          mountPath: /etc/epoch/epochControlWorkspaceApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-workspace-api
  labels:
    name: epoch-control-workspace-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-workspace-api

#---- epoch-control-github-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-github-conf
  namespace: epoch-system
data:
  api_github.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-github-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-github-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-github-api
    spec:
      volumes:
      - name: epoch-control-github-conf
        configMap:
          name: epoch-control-github-conf
      containers:
      - name: epoch-control-github-api
        image: exastro/epoch-control-github-api:1.1.0_20220630_1100
        env:
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: NO_PROXY
          value: localhost,127.0.0.1,10.96.0.1,kurbernetes.default.svc,kurbernetes.default.svc.cluster.local
        - name: CONFIG_API_GITHUB_PATH
          value: "/etc/epoch/epochControlGitHubApi/api_github.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_GITHUB_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_WEBHOOK_PORT
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: WEBHOOK_PORT
        volumeMounts:
        - name: epoch-control-github-conf
          mountPath: /etc/epoch/epochControlGitHubApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-github-api
  labels:
    name: epoch-control-github-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-github-api

#---- epoch-control-inside-gitlab-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-inside-gitlab-conf
  namespace: epoch-system
data:
  api_inside_gitlab.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-inside-gitlab-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-inside-gitlab-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-inside-gitlab-api
    spec:
      volumes:
      - name: epoch-control-inside-gitlab-conf
        configMap:
          name: epoch-control-inside-gitlab-conf
      containers:
      - name: epoch-control-inside-gitlab-api
        image: exastro/epoch-control-inside-gitlab-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_INSIDE_GITLAB_PATH
          value: "/etc/epoch/epochControlInsideGitLabApi/api_inside_gitlab.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_INSIDE_GITLAB_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_WEBHOOK_PORT
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: WEBHOOK_PORT
        - name: EPOCH_HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: EPOCH_HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: EPOCH_NO_PROXY
          value: ""
        volumeMounts:
        - name: epoch-control-inside-gitlab-conf
          mountPath: /etc/epoch/epochControlInsideGitLabApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-inside-gitlab-api
  labels:
    name: epoch-control-inside-gitlab-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-inside-gitlab-api

#---- epoch-control-tekton-api.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-tekton-conf
  namespace: epoch-system
data:
  api_tekton.conf: |
    TZ='Asia/Tokyo'
    MYSQL_HOST='tekton-pipeline-db'
    MYSQL_PORT='3306'
    MYSQL_DATABASE='tekton_pipeline_db'
    MYSQL_USER='app_user'
    MYSQL_PASSWORD='password'
    RESOURCE_CREATION_WAIT=60

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-tekton-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-tekton-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-tekton-api
    spec:
      volumes:
      - name: epoch-control-tekton-conf
        configMap:
          name: epoch-control-tekton-conf
      containers:
      - name: epoch-control-tekton-api
        image: exastro/epoch-control-tekton-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_TEKTON_PATH
          value: "/etc/epoch/epochControlTektonApi/api_tekton.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_TEKTON_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: EPOCH_HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: EPOCH_NO_PROXY
          value: ""
        - name: EPOCH_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: host-setting-config
              key: EPOCH_HOSTNAME
        - name: EPOCH_RS_WORKSPACE_PROTOCOL
          value: "http"
        - name: EPOCH_RS_WORKSPACE_HOST
          value: "epoch-rs-workspace-api"
        - name: EPOCH_RS_WORKSPACE_PORT
          value: "8000"
        volumeMounts:
        - name: epoch-control-tekton-conf
          mountPath: /etc/epoch/epochControlTektonApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-control-tekton-api
  labels:
    name: epoch-control-tekton-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-tekton-api

#---- epoch-control-tekton-db.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-pipeline-db-myconf
  namespace: epoch-system
data:
  my.cnf: |
    [mysqld]
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    secure_file_priv=/tmp
    [client]
    default-character-set=utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-pipeline-db-initdb
  namespace: epoch-system
data:
  tekton-pipeline.sql: |
    create database tekton_pipeline_db
      CHARACTER SET utf8mb4
      COLLATE utf8mb4_unicode_ci;
    create user app_user IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL ON tekton_pipeline_db.* TO app_user;
    use tekton_pipeline_db;
    create table tekton_pipeline_yaml (
      yaml_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned not null,
      kind varchar(16),
      filename varchar(256),
      yamltext text,
      index(workspace_id)
    );
    create table tekton_pipeline_task (
      task_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned not null,
      pipeline_id int unsigned not null,
      pipeline_run_name varchar(128),
      pipeline_run_uid  varchar(128),
      status varchar(16) not null,
      git_repository_url varchar(1024) not null,
      git_branch varchar(1024),
      container_registry_image varchar(1024),
      container_registry_image_tag varchar(1024),
      container_registry_image_digest varchar(1024),
      git_webhook_header text,
      git_webhook_body text,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      index(pipeline_run_name)
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-pipeline-db
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: tekton-pipeline-db
  replicas: 1
  template:
    metadata:
      labels:
        name: tekton-pipeline-db
    spec:
      volumes:
      - name: mysqlconf-volume
        configMap:
          name: tekton-pipeline-db-myconf
      # COMMENT OUT:Persistent data retention
      #- name: mysqldata
      #  hostPath:
      #    path: /var/data/epoch/tekton_pipeline_db/mysql
      #    type: DirectoryOrCreate
      - name: mysqlinitdb-volume
        configMap:
          name: tekton-pipeline-db-initdb
      containers:
      - name: mysql
        image: mysql
        volumeMounts:
        # COMMENT OUT:Persistent data retention
        #- name: mysqldata
        #  mountPath: /var/lib/mysql
        - name: mysqlconf-volume
          mountPath: /etc/mysql
        - name: mysqlinitdb-volume
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: TZ
          value: "Asia/Tokyo"

---
apiVersion: v1
kind: Service
metadata:
  name: tekton-pipeline-db
  labels:
    name: tekton-pipeline-db
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    name: tekton-pipeline-db

#---- epoch-control-argocd-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-argocd-conf
  namespace: epoch-system
data:
  api_argocd.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-argocd-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-argocd-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-argocd-api
    spec:
      volumes:
      - name: epoch-control-argocd-conf
        configMap:
          name: epoch-control-argocd-conf
      containers:
      - name: epoch-control-argocd-api
        image: exastro/epoch-control-argocd-api:1.1.0_20220701_1000
        env:
        - name: CONFIG_API_ARGOCD_PATH
          value: "/etc/epoch/epochControlArgoCDApi/api_argocd.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_ARGOCD_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: host-setting-config
              key: EPOCH_HOSTNAME
        envFrom:
          - prefix: EPOCH_
            configMapRef:
              name: epoch-control-api-config
        volumeMounts:
        - name: epoch-control-argocd-conf
          mountPath: /etc/epoch/epochControlArgoCDApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-argocd-api
  labels:
    name: epoch-control-argocd-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-argocd-api

#---- epoch-control-ita-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-ita-conf
  namespace: epoch-system
data:
  api_ita.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-ita-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-ita-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-ita-api
    spec:
      volumes:
      - name: epoch-control-ita-conf
        configMap:
          name: epoch-control-ita-conf
      containers:
      - name: epoch-control-ita-api
        image: exastro/epoch-control-ita-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_ITA_PATH
          value: "/etc/epoch/epochControlITAApi/api_ita.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_ITA_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EPOCH_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: host-setting-config
              key: EPOCH_HOSTNAME
        - name: EPOCH_HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: EPOCH_HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: EPOCH_NO_PROXY
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: NO_PROXY
        - name: EPOCH_RS_WORKSPACE_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_PROTOCOL
        - name: EPOCH_RS_WORKSPACE_HOST
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_HOST
        - name: EPOCH_RS_WORKSPACE_PORT
          valueFrom:
            configMapKeyRef:
              name: epoch-control-api-config
              key: RS_WORKSPACE_PORT
        volumeMounts:
        - name: epoch-control-ita-conf
          mountPath: /etc/epoch/epochControlITAApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-ita-api
  labels:
    name: epoch-control-ita-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-ita-api

#---- epoch-control-dockerhub-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-control-dockerhub-conf
  namespace: epoch-system
data:
  api_dockerhub.conf: |
    TZ='Asia/Tokyo'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-control-dockerhub-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-control-dockerhub-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-control-dockerhub-api
    spec:
      volumes:
      - name: epoch-control-dockerhub-conf
        configMap:
          name: epoch-control-dockerhub-conf
      containers:
      - name: epoch-control-dockerhub-api
        image: exastro/epoch-control-dockerhub-api:1.1.0_20220630_1100
        env:
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: NO_PROXY
          value: localhost,127.0.0.1,10.96.0.1,kurbernetes.default.svc,kurbernetes.default.svc.cluster.local
        - name: CONFIG_API_DOCKERHUB_PATH
          value: "/etc/epoch/epochControlDockerHubApi/api_dockerhub.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_DOCKERHUB_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        volumeMounts:
        - name: epoch-control-dockerhub-conf
          mountPath: /etc/epoch/epochControlDockerHubApi
---
apiVersion: v1
kind: Service
metadata:
  name: epoch-control-dockerhub-api
  labels:
    name: epoch-control-dockerhub-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-control-dockerhub-api

#---- epoch-rs-workspace-api.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-rs-workspace-conf
  namespace: epoch-system
data:
  api_workspace.conf: |
    TZ='Asia/Tokyo'
    MYSQL_HOST='workspace-db'
    MYSQL_PORT='3306'
    MYSQL_DATABASE='workspace_db'
    MYSQL_USER='app_user'
    MYSQL_PASSWORD='password'

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-rs-workspace-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-rs-workspace-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-rs-workspace-api
    spec:
      volumes:
      - name: epoch-rs-workspace-conf
        configMap:
          name: epoch-rs-workspace-conf
      containers:
      - name: epoch-rs-workspace-api
        image: exastro/epoch-rs-workspace-api:1.1.0_20220630_1300
        env:
        - name: CONFIG_API_WORKSPACE_PATH
          value: "/etc/epoch/epochRsWorkspaceApi/api_workspace.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_WORKSPACE_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: ENCRYPT_KEY
          valueFrom:
            secretKeyRef:
              name: epoch-key
              key: ENCRYPT_KEY
        volumeMounts:
        - name: epoch-rs-workspace-conf
          mountPath: /etc/epoch/epochRsWorkspaceApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-rs-workspace-api
  labels:
    name: epoch-rs-workspace-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-rs-workspace-api

#---- epoch-rs-workspace-db.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-db-myconf
  namespace: epoch-system
data:
  my.cnf: |
    [mysqld]
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    secure_file_priv=/tmp
    binlog_row_image=minimal
    binlog_row_value_options=partial_json
    [client]
    default-character-set=utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-db-initdb
  namespace: epoch-system
data:
  workspace.sql: |
    create database workspace_db
      CHARACTER SET utf8mb4
      COLLATE utf8mb4_unicode_ci;
    create user app_user IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL ON workspace_db.* TO app_user;
    use workspace_db;
    create table workspace (
      workspace_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      organization_id  int unsigned not null,
      specification json,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      role_update_at datetime not null DEFAULT CURRENT_TIMESTAMP
    );
    create table workspace_history (
      history_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned not null,
      organization_id  int unsigned not null,
      specification json,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      role_update_at datetime not null DEFAULT CURRENT_TIMESTAMP
    );
    create table manifest (
      id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned not null,
      file_name varchar(1024) not null,
      file_text text not null,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    create table workspace_access (
      workspace_id int unsigned not null PRIMARY KEY,
      info json,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    create table workspace_status (
      workspace_id int unsigned not null PRIMARY KEY,
      info json,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-db
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: workspace-db
  replicas: 1
  template:
    metadata:
      labels:
        name: workspace-db
    spec:
      containers:
      - name: mysql
        image: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysqlconf-volume
          mountPath: /etc/mysql
        - name: mysqlinitdb-volume
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
      volumes:
      - name: mysqlconf-volume
        configMap:
          name: workspace-db-myconf
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: epoch-workspace-db
      - name: mysqlinitdb-volume
        configMap:
          name: workspace-db-initdb

---
apiVersion: v1
kind: Service
metadata:
  name: workspace-db
  labels:
    name: workspace-db
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    name: workspace-db

#---- epoch-rs-ci-result-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-rs-ci-result-conf
  namespace: epoch-system
data:
  api_ci_result.conf: |
    TZ='Asia/Tokyo'
    MYSQL_HOST='tekton-pipelinerun-db'
    MYSQL_PORT='3306'
    MYSQL_DATABASE='tekton_pipelinerun_db'
    MYSQL_USER='app_user'
    MYSQL_PASSWORD='password'
    RESOURCE_CREATION_WAIT=60

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-rs-ci-result-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-rs-ci-result-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-rs-ci-result-api
    spec:
      volumes:
      - name: epoch-rs-ci-result-conf
        configMap:
          name: epoch-rs-ci-result-conf
      containers:
      - name: epoch-rs-ci-result-api
        image: exastro/epoch-rs-ci-result-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_CI_RESULT_PATH
          value: "/etc/epoch/epochRsCiResultApi/api_ci_result.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_CI_RESULT_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        volumeMounts:
        - name: epoch-rs-ci-result-conf
          mountPath: /etc/epoch/epochRsCiResultApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-rs-ci-result-api
  labels:
    name: epoch-rs-ci-result-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-rs-ci-result-api

#---- epoch-rs-ci-result-db.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-pipelinerun-db-myconf
  namespace: epoch-system
data:
  my.cnf: |
    [mysqld]
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    secure_file_priv=/tmp
    [client]
    default-character-set=utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-pipelinerun-db-initdb
  namespace: epoch-system
data:
  tekton-pipeline.sql: |
    create database tekton_pipelinerun_db
      CHARACTER SET utf8mb4
      COLLATE utf8mb4_unicode_ci;
    create user app_user IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL ON tekton_pipelinerun_db.* TO app_user;
    use tekton_pipelinerun_db;
    create table tekton_pipeline_task (
      task_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned not null,
      pipeline_id int unsigned not null,
      pipeline_run_name varchar(128),
      pipeline_run_uid  varchar(128),
      status varchar(16) not null,
      git_repository_url varchar(1024) not null,
      git_branch varchar(1024),
      git_sender_user varchar(1024),
      container_registry_image varchar(1024),
      container_registry_image_tag varchar(1024),
      container_registry_image_digest varchar(1024),
      git_webhook_header text,
      git_webhook_body text,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      index(pipeline_run_name)
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-pipelinerun-db
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: tekton-pipelinerun-db
  replicas: 1
  template:
    metadata:
      labels:
        name: tekton-pipelinerun-db
    spec:
      containers:
      - name: mysql
        image: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysqlconf-volume
          mountPath: /etc/mysql
        - name: mysqlinitdb-volume
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: TZ
          value: "Asia/Tokyo"
      volumes:
      - name: mysqlconf-volume
        configMap:
          name: tekton-pipelinerun-db-myconf
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: epoch-tekton-pipelinerun-db
      - name: mysqlinitdb-volume
        configMap:
          name: tekton-pipelinerun-db-initdb

---
apiVersion: v1
kind: Service
metadata:
  name: tekton-pipelinerun-db
  labels:
    name: tekton-pipelinerun-db
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    name: tekton-pipelinerun-db

#---- epoch-rs-cd-result-api.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-rs-cd-result-conf
  namespace: epoch-system
data:
  api_cd_result.conf: |
    TZ='Asia/Tokyo'
    MYSQL_HOST='rs-cd-result-db'
    MYSQL_PORT='3306'
    MYSQL_DATABASE='rs_cd_result_db'
    MYSQL_USER='app_user'
    MYSQL_PASSWORD='password'
    RESOURCE_CREATION_WAIT=60

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-rs-cd-result-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-rs-cd-result-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-rs-cd-result-api
    spec:
      volumes:
      - name: epoch-rs-cd-result-conf
        configMap:
          name: epoch-rs-cd-result-conf
      containers:
      - name: epoch-rs-cd-result-api
        image: exastro/epoch-rs-cd-result-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_CD_RESULT_PATH
          value: "/etc/epoch/epochRsCdResultApi/api_cd_result.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_CD_RESULT_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: ENCRYPT_KEY
          valueFrom:
            secretKeyRef:
              name: epoch-key
              key: ENCRYPT_KEY
        volumeMounts:
        - name: epoch-rs-cd-result-conf
          mountPath: /etc/epoch/epochRsCdResultApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-rs-cd-result-api
  labels:
    name: epoch-rs-cd-result-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-rs-cd-result-api

#---- epoch-rs-cd-result-db.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: rs-cd-result-db-myconf
  namespace: epoch-system
data:
  my.cnf: |
    [mysqld]
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    secure_file_priv=/tmp
    [client]
    default-character-set=utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rs-cd-result-db-initdb
  namespace: epoch-system
data:
  workspace.sql: |
    create database rs_cd_result_db
      CHARACTER SET utf8mb4
      COLLATE utf8mb4_unicode_ci;
    create user app_user IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL ON rs_cd_result_db.* TO app_user;
    use rs_cd_result_db;
    create table cd_result (
      workspace_id int unsigned not null,
      cd_result_id varchar(10) not null,
      cd_status varchar(32),
      contents json,
      username text,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP,
      update_at datetime not null DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      PRIMARY KEY (workspace_id, cd_result_id)
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rs-cd-result-db
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: rs-cd-result-db
  replicas: 1
  template:
    metadata:
      labels:
        name: rs-cd-result-db
    spec:
      containers:
      - name: mysql
        image: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysqlconf-volume
          mountPath: /etc/mysql
        - name: mysqlinitdb-volume
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
      volumes:
      - name: mysqlconf-volume
        configMap:
          name: rs-cd-result-db-myconf
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: epoch-rs-cd-result-db
      - name: mysqlinitdb-volume
        configMap:
          name: rs-cd-result-db-initdb

---
apiVersion: v1
kind: Service
metadata:
  name: rs-cd-result-db
  labels:
    name: rs-cd-result-db
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    name: rs-cd-result-db

#---- epoch-rs-logs-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-rs-logs-conf
  namespace: epoch-system
data:
  api_logs.conf: |
    TZ='Asia/Tokyo'
    MYSQL_HOST='rs-logs-db'
    MYSQL_PORT='3306'
    MYSQL_DATABASE='rs_logs_db'
    MYSQL_USER='app_user'
    MYSQL_PASSWORD='password'
    RESOURCE_CREATION_WAIT=60

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-rs-logs-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-rs-logs-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-rs-logs-api
    spec:
      volumes:
      - name: epoch-rs-logs-conf
        configMap:
          name: epoch-rs-logs-conf
      containers:
      - name: epoch-rs-logs-api
        image: exastro/epoch-rs-logs-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_LOGS_PATH
          value: "/etc/epoch/epochRsLogsApi/api_logs.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_LOGS_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        volumeMounts:
        - name: epoch-rs-logs-conf
          mountPath: /etc/epoch/epochRsLogsApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-rs-logs-api
  labels:
    name: epoch-rs-logs-api
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-rs-logs-api

#---- epoch-rs-logs-db.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: rs-logs-db-myconf
  namespace: epoch-system
data:
  my.cnf: |
    [mysqld]
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    secure_file_priv=/tmp
    [client]
    default-character-set=utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rs-logs-db-initdb
  namespace: epoch-system
data:
  workspace.sql: |
    create database rs_logs_db
      CHARACTER SET utf8mb4
      COLLATE utf8mb4_unicode_ci;
    create user app_user IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL ON rs_logs_db.* TO app_user;
    use rs_logs_db;
    create table logs (
      log_id int unsigned not null PRIMARY KEY AUTO_INCREMENT,
      workspace_id int unsigned,
      log_kind text,
      contents json,
      username text,
      create_at datetime not null DEFAULT CURRENT_TIMESTAMP
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rs-logs-db
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: rs-logs-db
  replicas: 1
  template:
    metadata:
      labels:
        name: rs-logs-db
    spec:
      containers:
      - name: mysql
        image: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysqlconf-volume
          mountPath: /etc/mysql
        - name: mysqlinitdb-volume
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
      volumes:
      - name: mysqlconf-volume
        configMap:
          name: rs-logs-db-myconf
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: epoch-rs-logs-db
      - name: mysqlinitdb-volume
        configMap:
          name: rs-logs-db-initdb

---
apiVersion: v1
kind: Service
metadata:
  name: rs-logs-db
  labels:
    name: rs-logs-db
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    name: rs-logs-db

#---- epoch-service-api-config.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-service-api-config
  namespace: epoch-system
data:
  EPOCH_CONTROL_WORKSPACE_PROTOCOL: "http"
  EPOCH_CONTROL_WORKSPACE_HOST: "epoch-control-workspace-api"
  EPOCH_CONTROL_WORKSPACE_PORT: "8000"
  EPOCH_CONTROL_ARGOCD_PROTOCOL: "http"
  EPOCH_CONTROL_ARGOCD_HOST: "epoch-control-argocd-api"
  EPOCH_CONTROL_ARGOCD_PORT: "8000"
  EPOCH_CONTROL_ITA_PROTOCOL: "http"
  EPOCH_CONTROL_ITA_HOST: "epoch-control-ita-api"
  EPOCH_CONTROL_ITA_PORT: "8000"
  EPOCH_CONTROL_TEKTON_PROTOCOL: "http"
  EPOCH_CONTROL_TEKTON_HOST: "epoch-control-tekton-api"
  EPOCH_CONTROL_TEKTON_PORT: "8000"
  EPOCH_CONTROL_GITHUB_PROTOCOL: "http"
  EPOCH_CONTROL_GITHUB_HOST: "epoch-control-github-api"
  EPOCH_CONTROL_GITHUB_PORT: "8000"
  EPOCH_CONTROL_INSIDE_GITLAB_PROTOCOL: "http"
  EPOCH_CONTROL_INSIDE_GITLAB_HOST: "epoch-control-inside-gitlab-api"
  EPOCH_CONTROL_INSIDE_GITLAB_PORT: "8000"
  EPOCH_CONTROL_DOCKERHUB_PROTOCOL: "http"
  EPOCH_CONTROL_DOCKERHUB_HOST: "epoch-control-dockerhub-api"
  EPOCH_CONTROL_DOCKERHUB_PORT: "8000"
  EPOCH_RS_WORKSPACE_PROTOCOL: "http"
  EPOCH_RS_WORKSPACE_HOST: "epoch-rs-workspace-api"
  EPOCH_RS_WORKSPACE_PORT: "8000"
  EPOCH_RS_CI_RESULT_PROTOCOL: "http"
  EPOCH_RS_CI_RESULT_HOST: "epoch-rs-ci-result-api"
  EPOCH_RS_CI_RESULT_PORT: "8000"
  EPOCH_RS_CD_RESULT_PROTOCOL: "http"
  EPOCH_RS_CD_RESULT_HOST: "epoch-rs-cd-result-api"
  EPOCH_RS_CD_RESULT_PORT: "8000"
  EPOCH_RS_LOGS_PROTOCOL: "http"
  EPOCH_RS_LOGS_HOST: "epoch-rs-logs-api"
  EPOCH_RS_LOGS_PORT: "8000"
  EPOCH_EPAI_PROTOCOL: "https"
  EPOCH_EPAI_HOST: ""
  EPOCH_EPAI_PORT: "31182"
  EPOCH_EPAI_API_PROTOCOL: "http"
  EPOCH_EPAI_API_HOST: "authentication-infra-api.exastro-platform-authentication-infra.svc"
  EPOCH_EPAI_API_PORT: "8000"
  EPOCH_EPAI_REALM_NAME: "exastroplatform"
  PYTHONIOENCODING: utf-8

#---- epoch-service-api2.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-service-api2-conf
  namespace: epoch-system
data:
  api_service.conf: |
    TZ='Asia/Tokyo'
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-service-api2
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-service-api2
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-service-api2
    spec:
      volumes:
      - name: epoch-service-api2-conf
        configMap:
          name: epoch-service-api2-conf
      containers:
      - name: epoch-service-api2
        image: exastro/epoch-service-api2:1.1.0_20220701_0900
        env:
        - name: CONFIG_API_SERVICE_PATH
          value: "/etc/epoch/epochServiceApi/api_service.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_SERVICE_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        envFrom:
          - configMapRef:
              name: epoch-service-api-config
          # - configMapRef:
          #     name: epoch-service-api-epai-config
          # - prefix: EPOCH_
          #   secretRef:
          #     name: epoch-service-api-secret
        volumeMounts:
        - name: epoch-service-api2-conf
          mountPath: /etc/epoch/epochServiceApi

---

apiVersion: v1
kind: Service
metadata:
  name: epoch-service-api2
  labels:
    name: epoch-service-api2
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: epoch-service-api2

#---- epoch-ui.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-ui
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-ui
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-ui
    spec:
      containers:
      - name: epoch-ui
        image: exastro/epoch-ui:1.1.0_20220630_1100

---
apiVersion: v1
kind: Service
metadata:
  name: epoch-ui
  labels:
    name: epoch-ui
  namespace: epoch-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  #- name: https
  #  port: 4430
  #  targetPort: 4430
  selector:
    name: epoch-ui

#---- epoch-monitoring-api-config.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-monitoring-api-config
  namespace: epoch-system
data:
  EPOCH_CONTROL_ARGOCD_PROTOCOL: "http"
  EPOCH_CONTROL_ARGOCD_HOST: "epoch-control-argocd-api"
  EPOCH_CONTROL_ARGOCD_PORT: "8000"
  EPOCH_CONTROL_ITA_PROTOCOL: "http"
  EPOCH_CONTROL_ITA_HOST: "epoch-control-ita-api"
  EPOCH_CONTROL_ITA_PORT: "8000"
  EPOCH_CONTROL_GITHUB_PROTOCOL: "http"
  EPOCH_CONTROL_GITHUB_HOST: "epoch-control-github-api"
  EPOCH_CONTROL_GITHUB_PORT: "8000"
  EPOCH_CONTROL_INSIDE_GITLAB_PROTOCOL: "http"
  EPOCH_CONTROL_INSIDE_GITLAB_HOST: "epoch-control-inside-gitlab-api"
  EPOCH_CONTROL_INSIDE_GITLAB_PORT: "8000"
  EPOCH_RS_CD_RESULT_PROTOCOL: "http"
  EPOCH_RS_CD_RESULT_HOST: "epoch-rs-cd-result-api"
  EPOCH_RS_CD_RESULT_PORT: "8000"
  EPOCH_RS_LOGS_PROTOCOL: "http"
  EPOCH_RS_LOGS_HOST: "epoch-rs-logs-api"
  EPOCH_RS_LOGS_PORT: "8000"
  PYTHONIOENCODING: utf-8
  EPOCH_MONITORING_ARGOCD_INTERVAL_SEC: "5"
  EPOCH_MONITORING_ITA_INTERVAL_SEC: "5"
  EPOCH_MONITORING_ARGOCD_ERROR_RETRY_COUNT: "0"
  EPOCH_MONITORING_ITA_ERROR_RETRY_COUNT: "0"

#---- epoch-monitoring-cd-api.yaml
---
#   Copyright 2021 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: epoch-monitoring-cd-api-conf
  namespace: epoch-system
data:
  api_monitoring_cd.conf: |
    TZ='Asia/Tokyo'
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-monitoring-cd-api
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-monitoring-cd-api
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-monitoring-cd-api
    spec:
      volumes:
      - name: epoch-monitoring-cd-api-conf
        configMap:
          name: epoch-monitoring-cd-api-conf
      containers:
      - name: epoch-monitoring-cd-api
        image: exastro/epoch-monitoring-cd-api:1.1.0_20220630_1100
        env:
        - name: CONFIG_API_MONITORING_CD_PATH
          value: "/etc/epoch/epochMonitoringCdApi/api_monitoring_cd.conf"
        - name: FLASK_ENV
          value: "production"
        - name: PYTHONIOENCODING
          value: utf-8
        envFrom:
          - configMapRef:
              name: epoch-monitoring-api-config
        volumeMounts:
        - name: epoch-monitoring-cd-api-conf
          mountPath: /etc/epoch/epochMonitoringCdApi

#---- exastro-platform-authentication-infra-role.yaml
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: exastro-platform-authentication-infra-role
  namespace: exastro-platform-authentication-infra
rules:
 - apiGroups: ["apps"]
   resources: ["deployments"]
   verbs: ["get", "list", "watch", "create", "update", "patch"]
 - apiGroups: [""]
   resources: ["configmaps"]
   verbs: ["get", "list", "watch", "create", "update", "patch"]
 - apiGroups: [""]
   resources: ["services"]
   verbs: ["get", "list", "watch", "create", "update", "patch"]
 - apiGroups: [""]
   resources: ["pods"]
   verbs: ["get", "list", "watch", "create", "update", "patch"]
 - apiGroups: [""]
   resources: ["pods/exec"]
   verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
 name: exastro-platform-authentication-infra-rolebinding
 namespace: exastro-platform-authentication-infra
subjects:
- kind: ServiceAccount
  name: default
  namespace: exastro-platform-authentication-infra
roleRef:
  kind: Role
  name: exastro-platform-authentication-infra-role
  apiGroup: rbac.authorization.k8s.io

#---- authentication-infra-env.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: exastro-platform-authentication-infra-env
  namespace: exastro-platform-authentication-infra
data:
  EXASTRO_KEYCLOAK_HOST: ""
  EXASTRO_KEYCLOAK_PROTOCOL: "https"
  EXASTRO_KEYCLOAK_PORT: "31182"
  KEYCLOAK_DB_VENDOR: "mariadb"
  KEYCLOAK_DB_HOST: "keycloak-db"
  KEYCLOAK_DB_DATABASE: "keycloak"

#---- authentication-infra-secret.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: Secret
metadata:
  name: exastro-platform-authentication-infra-secret
  namespace: exastro-platform-authentication-infra
stringData:
  GATEWAY_CRYPTO_PASSPHRASE: ""
  KEYCLOAK_USER:  "admin"
  KEYCLOAK_PASSWORD: "admin"
  KEYCLOAK_DB_USER: "keycloak"
  KEYCLOAK_DB_PASSWORD: "password"
  KEYCLOAK_DB_ROOT_PASSWORD: "password"

#---- keycloak-db.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: keycloak-db
  namespace: exastro-platform-authentication-infra
spec:
  ports:
  - port: 3306
  selector:
    app: keycloak-db
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-db
  namespace: exastro-platform-authentication-infra
spec:
  selector:
    matchLabels:
      app: keycloak-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: keycloak-db
    spec:
      containers:
        - image: mariadb:10.4.8
          name: keycloak-db
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: exastro-platform-authentication-infra-secret
                  key: KEYCLOAK_DB_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: exastro-platform-authentication-infra-env
                  key: KEYCLOAK_DB_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: exastro-platform-authentication-infra-secret
                  key: KEYCLOAK_DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: exastro-platform-authentication-infra-secret
                  key: KEYCLOAK_DB_PASSWORD
          ports:
            - containerPort: 3306
              name: keycloak-db
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - >-
                  mysqladmin -h localhost --user=root --password=${MYSQL_ROOT_PASSWORD} ping
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - >-
                  mysql -h localhost --user=root --password=${MYSQL_ROOT_PASSWORD} -e "SELECT 1"
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: exastro-platform-authentication-infra-keycloak-db

#---- keycloak.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app: keycloak
  namespace: exastro-platform-authentication-infra
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    nodePort: 31180
  - name: https
    port: 8443
    targetPort: 8443
    nodePort: 31182
  selector:
    app: keycloak
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: exastro-platform-authentication-infra
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: jboss/keycloak:15.0.2
        env:
        - name: DB_VENDOR
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: KEYCLOAK_DB_VENDOR
        - name: DB_ADDR
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: KEYCLOAK_DB_HOST
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: KEYCLOAK_DB_DATABASE
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_DB_PASSWORD
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_USER
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_PASSWORD
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: 8080

#---- gateway-conf-template.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  epoch-system-template.conf: "Listen {{ epoch_port }}\n<VirtualHost *:{{ epoch_port
    }}>\n  SSLEngine on\n  SSLCertificateFile /etc/pki/tls/certs/exastro-platform-authentication-infra.pem\n
    \ SSLCertificateKeyFile /etc/pki/tls/private/exastro-platform-authentication-infra.key\n
    \ KeepAlive On\n  OIDCResponseType code\n  OIDCCryptoPassphrase {{ crypto_passphrase
    }}\n  OIDCSSLValidateServer Off\n  OIDCProviderMetadataURL https://{{ server }}:{{
    auth_port }}/auth/realms/exastroplatform/.well-known/openid-configuration\n  #OIDCPassClaimsAs
    headers\n  OIDCPassClaimsAs environment\n  OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With}
    == 'XMLHttpRequest'\"\n\n  RewriteEngine On\n  RewriteOptions inherit\n\n  OIDCCacheType
    file\n  \n  OIDCAuthNHeader X-Remote-User\n  OIDCClaimPrefix OIDC-CLAIM-\n\n  OIDCRedirectURI
    \ https://{{ server }}:{{ epoch_port }}/oidc-redirect/\n  OIDCClientID epoch-system\n
    \ OIDCClientSecret {{ epoch_system_client_secret }}\n  <Location ~ /(?!api)>\n
    \   ProxyPass        http://epoch-ui.epoch-system.svc:8000/ retry=0\n    ProxyPassReverse
    http://epoch-ui.epoch-system.svc:8000/\n    AuthType openid-connect\n    <Limit
    GET>\n      Require claim \"epoch-role:epoch-user\"\n    </Limit>\n  </Location>\n
    \ <Location /api/>\n    ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/
    retry=0 timeout=600\n    ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/\n
    \   AuthType openid-connect\n    <Limit GET>\n      Require claim \"epoch-role:epoch-user\"\n
    \   </Limit>\n  </Location>\n  <Location /api/workspace>\n    ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace
    retry=0 timeout=600\n    ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace\n
    \   AuthType openid-connect\n    <Limit GET>\n      Require claim \"epoch-role:epoch-user\"\n
    \   </Limit>\n    <Limit POST>\n      Require claim \"epoch-role:ws-create\"\n
    \   </Limit>\n  </Location>\n\n  IncludeOptional conf.d/exastroSettings/epoch-system/*.conf\n\n
    \ <Location /api/user/>\n    ProxyPass        http://authentication-infra-api:8000/user/
    retry=0\n    ProxyPassReverse http://authentication-infra-api:8000/user/\n    AuthType
    openid-connect\n    Require valid-user\n  </Location>\n  <Location /api/user/current>\n
    \   ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/user/current
    retry=0 timeout=600\n    ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/user/current\n
    \   AuthType openid-connect\n    Require claim \"epoch-role:epoch-user\"\n  </Location>\n
    \ <Location /api/user/current/password>\n    ProxyPass        http://authentication-infra-api:8000/user/current/password
    retry=0\n    ProxyPassReverse http://authentication-infra-api:8000/user/current/password\n
    \   AuthType openid-connect\n    Require valid-user\n    OIDCPassClaimsAs headers\n
    \ </Location>\n  <Location /api/client/>\n    ProxyPass        http://authentication-infra-api:8000/client/
    retry=0\n    ProxyPassReverse http://authentication-infra-api:8000/client/\n    AuthType
    openid-connect\n    <Limit GET>\n        Require claim \"epoch-role:epoch-user\"\n
    \   </Limit>\n    <LimitExcept GET>\n        Require all denied\n    </LimitExcept>\n
    \ </Location>\n  <Location /api/listener/>\n    ProxyPass        http://epoch-control-tekton-api.epoch-system.svc:8000/listener/
    retry=0\n    ProxyPassReverse http://epoch-control-tekton-api.epoch-system.svc:8000/listener/\n
    \   Require all granted\n  </Location>\n  <Location /favicon.ico>\n    Require
    all granted\n  </Location>\n</VirtualHost>\n"
  epoch-system-ws-template.conf: |2+
      <Location /api/workspace/{{ param.workspace_id }}>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }} retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST PUT>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-name-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-ci-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-cd-update"
        </Limit>
        <Limit DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-delete"
        </Limit>
        <Limit PATCH>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-name-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-ci-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-cd-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-member-add"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-member-role-update"
        </Limit>
        <LimitExcept GET POST PUT DELETE PATCH>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/pod>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/pod retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/pod
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST PUT>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-name-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-ci-update"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-cd-update"
        </Limit>
        <Limit DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-delete"
        </Limit>
        <LimitExcept GET POST PUT DELETE>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/ci>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/ci retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/ci
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST PUT>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-ci-update"
        </Limit>
        <Limit DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-delete"
        </Limit>
        <LimitExcept GET POST PUT DELETE>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/manifest/template>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/manifest/template retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/manifest/template
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST PUT DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-manifest-upload"
        </Limit>
        <LimitExcept GET POST PUT DELETE>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/manifest/parameter>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/manifest/parameter retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/manifest/parameter
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-manifest-setting"
        </Limit>
        <LimitExcept GET POST>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/cd/pipeline>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/pipeline retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/pipeline
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-cd-execute-result"
        </Limit>
        <Limit POST PUT>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-cd-update"
        </Limit>
        <Limit DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-delete"
        </Limit>
        <LimitExcept GET POST PUT DELETE>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/cd/exec>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/exec retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/exec
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-cd-execute"
        </Limit>
        <LimitExcept GET POST DELETE>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/cd/pipeline/argocd>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/pipeline/argocd retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/cd/pipeline/argocd
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-cd-execute-result"
        </Limit>
        <Limit POST>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-cd-execute"
        </Limit>
        <LimitExcept GET POST>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/member>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/member retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/member
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit POST>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-owner-role-setting"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-member-add"
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-member-role-update"
        </Limit>
        <LimitExcept GET POST>
            Require all denied
        </LimitExcept>
      </Location>

      <Location /api/workspace/{{ param.workspace_id }}/member/current>
        ProxyPass        http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/member/current retry=0 timeout=600
        ProxyPassReverse http://epoch-service-api2.epoch-system.svc:8000/workspace/{{ param.workspace_id }}/member/current
        AuthType openid-connect
        <Limit GET>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <Limit DELETE>
            Require claim "epoch-role:ws-{{ param.workspace_id }}-role-ws-reference"
        </Limit>
        <LimitExcept GET DELETE>
            Require all denied
        </LimitExcept>
      </Location>

  epoch-ws-ita-template.conf: "Listen {{ client_port }}\n<VirtualHost *:{{ client_port
    }}>\n  SSLEngine on\n  SSLCertificateFile /etc/pki/tls/certs/exastro-platform-authentication-infra.pem\n
    \ SSLCertificateKeyFile /etc/pki/tls/private/exastro-platform-authentication-infra.key\n
    \ KeepAlive On\n  OIDCResponseType code\n  OIDCCryptoPassphrase {{ crypto_passphrase
    }}\n  OIDCSSLValidateServer Off\n  OIDCProviderMetadataURL {{ auth_protocol }}://{{
    auth_host }}:{{ auth_port }}/auth/realms/{{ realm_name }}/.well-known/openid-configuration\n
    \ #OIDCPassClaimsAs headers\n  OIDCPassClaimsAs environment\n  \n  RewriteEngine
    On\n  RewriteOptions inherit\n\n  OIDCCacheType file\n\n  OIDCRedirectURI  {{
    client_protocol }}://{{ client_host }}:{{ client_port }}/oidc-redirect/\n  OIDCClientID
    {{ client_id }}\n  OIDCClientSecret {{ client_secret }}\n  <Location />\n    ProxyPass
    \       {{ backend_url }} retry=0\n    ProxyPassReverse {{ backend_url }}\n    AuthType
    openid-connect\n    Require claim \"epoch-role:{{ require_claim }}\"\n  </Location>\n
    \ <Location /favicon.ico>\n    Require all granted\n  </Location>\n</VirtualHost>\n"
  epoch-ws-sonarqube-template.conf: "Listen {{ client_port }}\n<VirtualHost *:{{ client_port
    }}>\n  SSLEngine on\n  SSLCertificateFile /etc/pki/tls/certs/exastro-platform-authentication-infra.pem\n
    \ SSLCertificateKeyFile /etc/pki/tls/private/exastro-platform-authentication-infra.key\n
    \ KeepAlive On\n  OIDCResponseType code\n  OIDCCryptoPassphrase {{ crypto_passphrase
    }}\n  OIDCSSLValidateServer Off\n  OIDCProviderMetadataURL {{ auth_protocol }}://{{
    auth_host }}:{{ auth_port }}/auth/realms/{{ realm_name }}/.well-known/openid-configuration\n
    \ #OIDCPassClaimsAs headers\n  OIDCPassClaimsAs environment\n  \n  RewriteEngine
    On\n  RewriteOptions inherit\n\n  OIDCCacheType file\n\n  OIDCRedirectURI  {{
    client_protocol }}://{{ client_host }}:{{ client_port }}/oidc-redirect/\n  OIDCClientID
    {{ client_id }}\n  OIDCClientSecret {{ client_secret }}\n  <Location />\n    ProxyPass
    \       {{ backend_url }} retry=0\n    ProxyPassReverse {{ backend_url }}\n    AuthType
    openid-connect\n    Require claim \"epoch-role:{{ require_claim }}\"\n  </Location>\n
    \ <Location /favicon.ico>\n    Require all granted\n  </Location>\n</VirtualHost>\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: gateway-conf-template
  namespace: exastro-platform-authentication-infra

#---- nodeport-template.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: nodeport-template
  namespace: exastro-platform-authentication-infra
data:
  nodeport-template.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: {{ client_id }}
      labels:
        app: {{ client_id }}
      namespace: {{ namespace }}
    spec:
      ports:
      - name: connection
        port: {{ port }}
        targetPort: {{ targetPort }}
        #{% if nodePort != 0 %}
        nodePort: {{ nodePort }}
        #{% endif %}
      selector:
        name: {{ deploy_name }}
      type: NodePort
#---- authentication-infra-api.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentication-infra-conf
  namespace: exastro-platform-authentication-infra
data:
  api_authc_infra.conf: |
    TZ='Asia/Tokyo'

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication-infra-api
  namespace: exastro-platform-authentication-infra
spec:
  selector:
    matchLabels:
      name: authentication-infra-api
  replicas: 1
  template:
    metadata:
      labels:
        name: authentication-infra-api
    spec:
      volumes:
      - name: authentication-infra-conf
        configMap:
          name: authentication-infra-conf
      - name: gateway-conf-template
        configMap:
          name: gateway-conf-template
      - name: nodeport-template
        configMap:
          name: nodeport-template
      - name: gateway-httpd-conf
        persistentVolumeClaim:
          claimName: exastro-authentication-infra-httpd
      containers:
      - name: authentication-infra-api
        image: exastro/authentication-infra-api:1.0.0_20220428_1530
        env:
        - name: CONFIG_API_AUTHC_INFRA_PATH
          value: "/etc/exastro-authentication-infra/authentication-infra-api/api_authc_infra.conf"
        - name: FLASK_ENV
          value: "production"
        - name: API_AUTHC_INFRA_PORT
          value: "8000"
        - name: PYTHONIOENCODING
          value: utf-8
        - name: EXASTRO_HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTP_PROXY
        - name: EXASTRO_HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: proxy-setting-config
              key: HTTPS_PROXY
        - name: EXASTRO_NO_PROXY
          value: ""
        - name: CONF_TEMPLATE_PATH
          value: "/app/exastro-authentication-infra/authentication-infra-conf-templates"
        - name: NODEPORT_TEMPLATE_PATH
          value: "/app/exastro-authentication-infra/authentication-infra-nodeport-templates"
        - name: EXASTRO_KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_USER
        - name: EXASTRO_KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: KEYCLOAK_PASSWORD
        - name: EXASTRO_KEYCLOAK_MASTER_REALM
          value: "master"
        - name: GATEWAY_CRYPTO_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: exastro-platform-authentication-infra-secret
              key: GATEWAY_CRYPTO_PASSPHRASE
        - name: EXASTRO_KEYCLOAK_HOST
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: EXASTRO_KEYCLOAK_HOST
        - name: EXASTRO_KEYCLOAK_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: EXASTRO_KEYCLOAK_PROTOCOL
        - name: EXASTRO_KEYCLOAK_PORT
          valueFrom:
            configMapKeyRef:
              name: exastro-platform-authentication-infra-env
              key: EXASTRO_KEYCLOAK_PORT
        - name: API_KEYCLOAK_HOST
          value: "keycloak.exastro-platform-authentication-infra.svc"
        - name: API_KEYCLOAK_PROTOCOL
          value: "http"
        - name: API_KEYCLOAK_PORT
          value: "8080"
        - name: GATEWAY_HTTPD_CONF_CM_NAME
          value: "gateway-httpd-conf"
        - name: EXASTRO_AUTHC_NAMESPACE
          value: "exastro-platform-authentication-infra"
        - name: GATEWAY_HTTPD_DEPLOY_NAME
          value: "gateway-httpd"
        - name: GATEWAY_HTTPD_CONF_PATH
          value: "/var/exastro-authentication-infra/httpd-conf"
        volumeMounts:
        - name: authentication-infra-conf
          mountPath: /etc/exastro-authentication-infra/authentication-infra-api
        - name: gateway-conf-template
          mountPath: /app/exastro-authentication-infra/authentication-infra-conf-templates
        - name: nodeport-template
          mountPath: /app/exastro-authentication-infra/authentication-infra-nodeport-templates
        - name: gateway-httpd-conf
          subPath: httpd-conf
          mountPath: /var/exastro-authentication-infra/httpd-conf

---

apiVersion: v1
kind: Service
metadata:
  name: authentication-infra-api
  labels:
    name: authentication-infra-api
  namespace: exastro-platform-authentication-infra
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  selector:
    name: authentication-infra-api

#---- gateway-httpd.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-httpd
  namespace: exastro-platform-authentication-infra
spec:
  selector:
    matchLabels:
      name: gateway-httpd
  replicas: 1
  template:
    metadata:
      labels:
        name: gateway-httpd
    spec:
      volumes:
      - name: gateway-httpd
        persistentVolumeClaim:
          claimName: exastro-authentication-infra-httpd
      containers:
      - name: gateway-httpd
        image: exastro/gateway-httpd:1.0.1_20220510_1400
        volumeMounts:
        - name: gateway-httpd
          mountPath: /etc/httpd/conf.d/exastroSettings
          subPath: httpd-conf
        #- name: gateway-httpd
        #  mountPath: /var/log/httpd
        #  subPath: httpd-log

---
apiVersion: v1
kind: Service
metadata:
  name: gateway-httpd
  labels:
    app: gateway-httpd
  namespace: exastro-platform-authentication-infra
spec:
  ports:
  - name: epoch
    port: 30443
    targetPort: 30443
    nodePort: 30443
  - name: gitlab
    port: 31183
    targetPort: 31183
    nodePort: 31183
  selector:
    name: gateway-httpd
  type: NodePort

#---- gateway-httpd-pv-create-script.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  epoch-pv-creator.sh: |
    #!/bin/bash

    echo "[INFO] START: $(basename $0)"

    SCRIPT_PATH=$(dirname $0)

    kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" &> /dev/null
    if [ $? -ne 0 ]; then
        echo "[ERROR] Not Found Pod : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME} hostname=${HOSTNAME}"
        exit 1
    fi

    WORKER_NODE_NAME=$(kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" -o jsonpath="{.spec.nodeName}")
    echo "WORKER_NODE_NAME:${WORKER_NODE_NAME}"

    if [ -z "${WORKER_NODE_NAME}" ]; then
        echo "[ERROR] Could not get the node name : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    IFS=, PRM_PV_BEFORE_DELETE_ARR=(${PRM_PV_BEFORE_DELETE})
    for PV in "${PRM_PV_BEFORE_DELETE_ARR[@]}"; do
        STATUS=""
        STATUS=$(kubectl get pv "${PV}" -o jsonpath='{.status.phase}')
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ "${STATUS}" = "Released" ]; then
            kubectl delete pv "${PV}"
        fi
    done

    sed -e "s/#WORKER-NODE-NAME#/${WORKER_NODE_NAME}/g" "${SCRIPT_PATH}/${PRM_PV_TEMPLATE}" | \
    kubectl apply -f -
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create Persistent Volume : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    kubectl delete job -n "${PRM_NAMESPACE}" "${PRM_JOBNAME}"
  exastro-authentication-infra-httpd-conf-pv-template.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: exastro-authentication-infra-sc
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: exastro-authentication-infra-httpd
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: exastro-authentication-infra-sc
      capacity:
        storage: 500Mi
      accessModes:
        - ReadWriteMany
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/authc-httpd
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: exastro-authentication-infra-httpd
      namespace: exastro-platform-authentication-infra
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 500Mi
      storageClassName: exastro-authentication-infra-sc
      volumeMode: Filesystem
      volumeName: exastro-authentication-infra-httpd

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: exastro-platform-authentication-infra-keycloak-db
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: exastro-authentication-infra-sc
      capacity:
        storage: 500Mi
      accessModes:
        - ReadWriteOnce
      persistentVolumeReclaimPolicy: Retain
      hostPath:
        path: /var/data/epoch/epoch-system/keycloak-db
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: exastro-platform-authentication-infra-keycloak-db
      namespace: exastro-platform-authentication-infra
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 500Mi
      storageClassName: exastro-authentication-infra-sc
      volumeMode: Filesystem
      volumeName: exastro-platform-authentication-infra-keycloak-db
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: gateway-httpd-pv-create-script
  namespace: epoch-system

#---- gateway-httpd-pv-create.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: batch/v1
kind: Job
metadata:
  name: gateway-httpd-pv-create
  namespace: epoch-system
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
      - name: script
        configMap:
          name: gateway-httpd-pv-create-script
      containers:
      - name: pv-creator
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        env:
        - name: PRM_JOBNAME
          value: gateway-httpd-pv-create
        - name: PRM_NAMESPACE
          value: epoch-system
        - name: PRM_PV_TEMPLATE
          value: exastro-authentication-infra-httpd-conf-pv-template.yaml
        - name: PRM_PV_BEFORE_DELETE
          value: "exastro-authentication-infra-httpd-conf,exastro-platform-authentication-infra-keycloak-db"
        volumeMounts:
        - mountPath: /job-script
          name: script
        command: ["sh", "-c"]
        args:
          - |
            bash /job-script/epoch-pv-creator.sh

#---- tekton-installer-script.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  tekton-installer-script.sh: |
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    SCRIPT_PATH="/tekton-installer-script"

    echo "---- install tekton-pipeline-release.yaml"
    kubectl apply -f ${SCRIPT_PATH}/tekton-pipeline-release.yaml

    echo "---- install tekton-trigger-release.yaml"
    kubectl apply -f ${SCRIPT_PATH}/tekton-trigger-release.yaml

    echo "---- waiting tekton installed"

    while true; do
        sleep 5;
        echo "  Check running tekton ...";
        kubectl get deploy tekton-triggers-webhook -n tekton-pipelines > /dev/null
        if [ $? -ne 0 ]; then
            continue;
        fi
        kubectl get deploy tekton-pipelines-webhook -n tekton-pipelines > /dev/null
        if [ $? -ne 0 ]; then
            continue;
        fi
        available=$(kubectl get deploy tekton-triggers-webhook -n tekton-pipelines -o json | jq -r ".status.availableReplicas")
        if [ "${available}" == "null" -o "${available}" == "0" ]; then
            continue;
        fi
        available=$(kubectl get deploy tekton-pipelines-webhook -n tekton-pipelines -o json | jq -r ".status.availableReplicas")
        if [ "${available}" == "null" -o "${available}" == "0" ]; then
            continue;
        fi

        if [ $(kubectl get pod -n tekton-pipelines -o json | jq -r ".items[].status.containerStatuses[].ready" | sed -e "/true/d" | wc -l) -ne 0 ]; then
            continue;
        fi
        break;
    done;

    echo "---- install tekton-trigger-interceptors.yaml"
    kubectl apply -f ${SCRIPT_PATH}/tekton-trigger-interceptors.yaml
  tekton-pipeline-release.yaml: |
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: Namespace
    metadata:
      name: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      name: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    spec:
      privileged: false
      allowPrivilegeEscalation: false
      volumes:
        - 'emptyDir'
        - 'configMap'
        - 'secret'
      hostNetwork: false
      hostIPC: false
      hostPID: false
      runAsUser:
        rule: 'MustRunAsNonRoot'
      seLinux:
        rule: 'RunAsAny'
      supplementalGroups:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535
      fsGroup:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-pipelines-controller-cluster-access
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      - apiGroups: [""]
        # Controller needs to watch Pods created by TaskRuns to see them progress.
        resources: ["pods"]
        verbs: ["list", "watch"]
        # Controller needs cluster access to all of the CRDs that it is responsible for
        # managing.
      - apiGroups: ["tekton.dev"]
        resources: ["tasks", "clustertasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources", "conditions", "runs"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["tekton.dev"]
        resources: ["taskruns/finalizers", "pipelineruns/finalizers", "runs/finalizers"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["tekton.dev"]
        resources: ["tasks/status", "clustertasks/status", "taskruns/status", "pipelines/status", "pipelineruns/status", "pipelineresources/status", "runs/status"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      # This is the access that the controller needs on a per-namespace basis.
      name: tekton-pipelines-controller-tenant-access
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      # Read-write access to create Pods, K8s Events and PVCs (for Workspaces)
      - apiGroups: [""]
        resources: ["pods", "pods/log", "events", "persistentvolumeclaims"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      # Read-only access to these.
      - apiGroups: [""]
        resources: ["configmaps", "limitranges", "secrets", "serviceaccounts"]
        verbs: ["get", "list", "watch"]
      # Read-write access to StatefulSets for Affinity Assistant.
      - apiGroups: ["apps"]
        resources: ["statefulsets"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-pipelines-webhook-cluster-access
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      # The webhook needs to be able to list and update customresourcedefinitions,
      # mainly to update the webhook certificates.
      - apiGroups: ["apiextensions.k8s.io"]
        resources: ["customresourcedefinitions", "customresourcedefinitions/status"]
        verbs: ["get", "list", "update", "patch", "watch"]
      - apiGroups: ["admissionregistration.k8s.io"]
        # The webhook performs a reconciliation on these two resources and continuously
        # updates configuration.
        resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
        # knative starts informers on these things, which is why we need get, list and watch.
        verbs: ["list", "watch"]
      - apiGroups: ["admissionregistration.k8s.io"]
        resources: ["mutatingwebhookconfigurations"]
        # This mutating webhook is responsible for applying defaults to tekton objects
        # as they are received.
        resourceNames: ["webhook.pipeline.tekton.dev"]
        # When there are changes to the configs or secrets, knative updates the mutatingwebhook config
        # with the updated certificates or the refreshed set of rules.
        verbs: ["get", "update"]
      - apiGroups: ["admissionregistration.k8s.io"]
        resources: ["validatingwebhookconfigurations"]
        # validation.webhook.pipeline.tekton.dev performs schema validation when you, for example, create TaskRuns.
        # config.webhook.pipeline.tekton.dev validates the logging configuration against knative's logging structure
        resourceNames: ["validation.webhook.pipeline.tekton.dev", "config.webhook.pipeline.tekton.dev"]
        # When there are changes to the configs or secrets, knative updates the validatingwebhook config
        # with the updated certificates or the refreshed set of rules.
        verbs: ["get", "update"]
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-pipelines"]
        verbs: ["use"]
      - apiGroups: [""]
        resources: ["namespaces"]
        verbs: ["get"]
        # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
        # which requires we can Get the system namespace.
        resourceNames: ["tekton-pipelines"]

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-pipelines-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["list", "watch"]
      # The controller needs access to these configmaps for logging information and runtime configuration.
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get"]
        resourceNames: ["config-logging", "config-observability", "config-artifact-bucket", "config-artifact-pvc", "feature-flags", "config-leader-election", "config-registry-cert"]
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-pipelines"]
        verbs: ["use"]
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["list", "watch"]
      # The webhook needs access to these configmaps for logging information.
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get"]
        resourceNames: ["config-logging", "config-observability", "config-leader-election"]
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["list", "watch"]
      # The webhook daemon makes a reconciliation loop on webhook-certs. Whenever
      # the secret changes it updates the webhook configurations with the certificates
      # stored in the secret.
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get", "update"]
        resourceNames: ["webhook-certs"]
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-pipelines"]
        verbs: ["use"]
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-pipelines-leader-election
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      # We uses leases for leaderelection
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: tekton-pipelines-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    rules:
      # All system:authenticated users needs to have access
      # of the pipelines-info ConfigMap even if they don't
      # have access to the other resources present in the
      # installed namespace.
      - apiGroups: [""]
        resources: ["configmaps"]
        resourceNames: ["pipelines-info"]
        verbs: ["get"]

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tekton-pipelines-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-pipelines-controller-cluster-access
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-controller
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-pipelines-controller-cluster-access
      apiGroup: rbac.authorization.k8s.io
    ---
    # If this ClusterRoleBinding is replaced with a RoleBinding
    # then the ClusterRole would be namespaced. The access described by
    # the tekton-pipelines-controller-tenant-access ClusterRole would
    # be scoped to individual tenant namespaces.
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-pipelines-controller-tenant-access
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-controller
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-pipelines-controller-tenant-access
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-pipelines-webhook-cluster-access
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-webhook
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-pipelines-webhook-cluster-access
      apiGroup: rbac.authorization.k8s.io

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-pipelines-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-controller
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-pipelines-controller
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-webhook
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-pipelines-webhook
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-pipelines-controller-leaderelection
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-controller
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-pipelines-leader-election
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-pipelines-webhook-leaderelection
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      - kind: ServiceAccount
        name: tekton-pipelines-webhook
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-pipelines-leader-election
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-pipelines-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    subjects:
      # Giving all system:authenticated users the access of the
      # ConfigMap which contains version information.
      - kind: Group
        name: system:authenticated
        apiGroup: rbac.authorization.k8s.io
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: tekton-pipelines-info

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: clustertasks.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: ClusterTask
        plural: clustertasks
        categories:
          - tekton
          - tekton-pipelines
      scope: Cluster
      conversion:
        strategy: Webhook
        webhook:
          conversionReviewVersions: ["v1beta1"]
          clientConfig:
            service:
              name: tekton-pipelines-webhook
              namespace: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: conditions.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      versions:
        - name: v1alpha1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: Condition
        plural: conditions
        categories:
          - tekton
          - tekton-pipelines
      scope: Namespaced

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: pipelines.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: false
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
        - name: v1beta1
          served: true
          storage: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
      names:
        kind: Pipeline
        plural: pipelines
        categories:
          - tekton
          - tekton-pipelines
      scope: Namespaced
      conversion:
        strategy: Webhook
        webhook:
          conversionReviewVersions: ["v1beta1"]
          clientConfig:
            service:
              name: tekton-pipelines-webhook
              namespace: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: pipelineruns.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Succeeded
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
            - name: StartTime
              type: date
              jsonPath: .status.startTime
            - name: CompletionTime
              type: date
              jsonPath: .status.completionTime
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Succeeded
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
            - name: StartTime
              type: date
              jsonPath: .status.startTime
            - name: CompletionTime
              type: date
              jsonPath: .status.completionTime
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: PipelineRun
        plural: pipelineruns
        categories:
          - tekton
          - tekton-pipelines
        shortNames:
          - pr
          - prs
      scope: Namespaced
      conversion:
        strategy: Webhook
        webhook:
          conversionReviewVersions: ["v1beta1"]
          clientConfig:
            service:
              name: tekton-pipelines-webhook
              namespace: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: pipelineresources.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      versions:
        - name: v1alpha1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: PipelineResource
        plural: pipelineresources
        categories:
          - tekton
          - tekton-pipelines
      scope: Namespaced

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: runs.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Succeeded
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
            - name: StartTime
              type: date
              jsonPath: .status.startTime
            - name: CompletionTime
              type: date
              jsonPath: .status.completionTime
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: Run
        plural: runs
        categories:
          - tekton
          - tekton-pipelines
      scope: Namespaced

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: tasks.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: Task
        plural: tasks
        categories:
          - tekton
          - tekton-pipelines
      scope: Namespaced
      conversion:
        strategy: Webhook
        webhook:
          conversionReviewVersions: ["v1beta1"]
          clientConfig:
            service:
              name: tekton-pipelines-webhook
              namespace: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: taskruns.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
        version: "v0.27.3"
    spec:
      group: tekton.dev
      preserveUnknownFields: false
      versions:
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Succeeded
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
            - name: StartTime
              type: date
              jsonPath: .status.startTime
            - name: CompletionTime
              type: date
              jsonPath: .status.completionTime
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Succeeded
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
            - name: StartTime
              type: date
              jsonPath: .status.startTime
            - name: CompletionTime
              type: date
              jsonPath: .status.completionTime
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
      names:
        kind: TaskRun
        plural: taskruns
        categories:
          - tekton
          - tekton-pipelines
        shortNames:
          - tr
          - trs
      scope: Namespaced
      conversion:
        strategy: Webhook
        webhook:
          conversionReviewVersions: ["v1beta1"]
          clientConfig:
            service:
              name: tekton-pipelines-webhook
              namespace: tekton-pipelines

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: Secret
    metadata:
      name: webhook-certs
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
    # The data is populated at install time.
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: validation.webhook.pipeline.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
    webhooks:
      - admissionReviewVersions: ["v1"]
        clientConfig:
          service:
            name: tekton-pipelines-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: validation.webhook.pipeline.tekton.dev
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: MutatingWebhookConfiguration
    metadata:
      name: webhook.pipeline.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
    webhooks:
      - admissionReviewVersions: ["v1"]
        clientConfig:
          service:
            name: tekton-pipelines-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: webhook.pipeline.tekton.dev
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: config.webhook.pipeline.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        pipeline.tekton.dev/release: "v0.27.3"
    webhooks:
      - admissionReviewVersions: ["v1"]
        clientConfig:
          service:
            name: tekton-pipelines-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: config.webhook.pipeline.tekton.dev
        objectSelector:
          matchLabels:
            app.kubernetes.io/part-of: tekton-pipelines

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-aggregate-edit
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        rbac.authorization.k8s.io/aggregate-to-edit: "true"
        rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rules:
      - apiGroups:
          - tekton.dev
        resources:
          - tasks
          - taskruns
          - pipelines
          - pipelineruns
          - pipelineresources
          - conditions
        verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-aggregate-view
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
        rbac.authorization.k8s.io/aggregate-to-view: "true"
    rules:
      - apiGroups:
          - tekton.dev
        resources:
          - tasks
          - taskruns
          - pipelines
          - pipelineruns
          - pipelineresources
          - conditions
        verbs:
          - get
          - list
          - watch

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-artifact-bucket
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    # data:
    #  # location of the gcs bucket to be used for artifact storage
    #  location: "gs://bucket-name"
    #  # name of the secret that will contain the credentials for the service account
    #  # with access to the bucket
    #  bucket.service.account.secret.name:
    #  # The key in the secret with the required service account json
    #  bucket.service.account.secret.key:
    #  # The field name that should be used for the service account
    #  # Valid values: GOOGLE_APPLICATION_CREDENTIALS, BOTO_CONFIG.
    #  bucket.service.account.field.name: GOOGLE_APPLICATION_CREDENTIALS

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-artifact-pvc
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    # data:
    #   # size of the PVC volume
    #   size: 5Gi
    #
    #   # storage class of the PVC volume
    #   storageClassName: storage-class-name

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-defaults
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      _example: |
        ################################
        #                              #
        #    EXAMPLE CONFIGURATION     #
        #                              #
        ################################

        # This block is not actually functional configuration,
        # but serves to illustrate the available configuration
        # options and document them in a way that is accessible
        # to users that `kubectl edit` this config map.
        #
        # These sample configuration options may be copied out of
        # this example block and unindented to be in the data block
        # to actually change the configuration.

        # default-timeout-minutes contains the default number of
        # minutes to use for TaskRun and PipelineRun, if none is specified.
        default-timeout-minutes: "60"  # 60 minutes

        # default-service-account contains the default service account name
        # to use for TaskRun and PipelineRun, if none is specified.
        default-service-account: "default"

        # default-managed-by-label-value contains the default value given to the
        # "app.kubernetes.io/managed-by" label applied to all Pods created for
        # TaskRuns. If a user's requested TaskRun specifies another value for this
        # label, the user's request supercedes.
        default-managed-by-label-value: "tekton-pipelines"

        # default-pod-template contains the default pod template to use
        # TaskRun and PipelineRun, if none is specified. If a pod template
        # is specified, the default pod template is ignored.
        # default-pod-template:

        # default-cloud-events-sink contains the default CloudEvents sink to be
        # used for TaskRun and PipelineRun, when no sink is specified.
        # Note that right now it is still not possible to set a PipelineRun or
        # TaskRun specific sink, so the default is the only option available.
        # If no sink is specified, no CloudEvent is generated
        # default-cloud-events-sink:

        # default-task-run-workspace-binding contains the default workspace
        # configuration provided for any Workspaces that a Task declares
        # but that a TaskRun does not explicitly provide.
        # default-task-run-workspace-binding: |
        #   emptyDir: {}

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: feature-flags
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      # Setting this flag to "true" will prevent Tekton to create an
      # Affinity Assistant for every TaskRun sharing a PVC workspace
      #
      # The default behaviour is for Tekton to create Affinity Assistants
      #
      # See more in the workspace documentation about Affinity Assistant
      # https://github.com/tektoncd/pipeline/blob/main/docs/workspaces.md#affinity-assistant-and-specifying-workspace-order-in-a-pipeline
      # or https://github.com/tektoncd/pipeline/pull/2630 for more info.
      disable-affinity-assistant: "false"
      # Setting this flag to "false" will allow Tekton to override your
      # Task container's $HOME environment variable.
      #
      # See https://github.com/tektoncd/pipeline/issues/2013 for more
      # info.
      disable-home-env-overwrite: "true"
      # Setting this flag to "false" will allow Tekton to override your
      # Task container's working directory.
      #
      # See https://github.com/tektoncd/pipeline/issues/1836 for more
      # info.
      disable-working-directory-overwrite: "true"
      # Setting this flag to "true" will prevent Tekton scanning attached
      # service accounts and injecting any credentials it finds into your
      # Steps.
      #
      # The default behaviour currently is for Tekton to search service
      # accounts for secrets matching a specified format and automatically
      # mount those into your Steps.
      #
      # Note: setting this to "true" will prevent PipelineResources from
      # working.
      #
      # See https://github.com/tektoncd/pipeline/issues/2791 for more
      # info.
      disable-creds-init: "false"
      # This option should be set to false when Pipelines is running in a
      # cluster that does not use injected sidecars such as Istio. Setting
      # it to false should decrease the time it takes for a TaskRun to start
      # running. For clusters that use injected sidecars, setting this
      # option to false can lead to unexpected behavior.
      #
      # See https://github.com/tektoncd/pipeline/issues/2080 for more info.
      running-in-environment-with-injected-sidecars: "true"
      # Setting this flag to "true" will require that any Git SSH Secret
      # offered to Tekton must have known_hosts included.
      #
      # See https://github.com/tektoncd/pipeline/issues/2981 for more
      # info.
      require-git-ssh-secret-known-hosts: "false"
      # Setting this flag to "true" enables the use of Tekton OCI bundle.
      # This is an experimental feature and thus should still be considered
      # an alpha feature.
      enable-tekton-oci-bundles: "false"
      # Setting this flag to "true" enables the use of custom tasks from
      # within pipelines.
      # This is an experimental feature and thus should still be considered
      # an alpha feature.
      enable-custom-tasks: "false"
      # Setting this flag will determine which gated features are enabled.
      # Acceptable values are "stable" or "alpha".
      enable-api-fields: "stable"
      # Setting this flag to "true" scopes when expressions to guard a Task only
      # instead of a Task and its dependent Tasks.
      scope-when-expressions-to-task: "false"

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: pipelines-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      # Contains pipelines version which can be queried by external
      # tools such as CLI. Elevated permissions are already given to
      # this ConfigMap such that even if we don't have access to
      # other resources in the namespace we still can have access to
      # this ConfigMap.
      version: "v0.27.3"

    ---
    # Copyright 2020 Tekton Authors LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-leader-election
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      # An inactive but valid configuration follows; see example.
      leaseDuration: "15s"
      renewDeadline: "10s"
      retryPeriod: "2s"

    ---
    # Copyright 2019 Tekton Authors LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-logging
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      # Common configuration for all knative codebase
      zap-logger-config: |
        {
          "level": "info",
          "development": false,
          "sampling": {
            "initial": 100,
            "thereafter": 100
          },
          "outputPaths": ["stdout"],
          "errorOutputPaths": ["stderr"],
          "encoding": "json",
          "encoderConfig": {
            "timeKey": "ts",
            "levelKey": "level",
            "nameKey": "logger",
            "callerKey": "caller",
            "messageKey": "msg",
            "stacktraceKey": "stacktrace",
            "lineEnding": "",
            "levelEncoder": "",
            "timeEncoder": "iso8601",
            "durationEncoder": "",
            "callerEncoder": ""
          }
        }
      # Log level overrides
      loglevel.controller: "info"
      loglevel.webhook: "info"

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-observability
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      _example: |
        ################################
        #                              #
        #    EXAMPLE CONFIGURATION     #
        #                              #
        ################################

        # This block is not actually functional configuration,
        # but serves to illustrate the available configuration
        # options and document them in a way that is accessible
        # to users that `kubectl edit` this config map.
        #
        # These sample configuration options may be copied out of
        # this example block and unindented to be in the data block
        # to actually change the configuration.

        # metrics.backend-destination field specifies the system metrics destination.
        # It supports either prometheus (the default) or stackdriver.
        # Note: Using Stackdriver will incur additional charges.
        metrics.backend-destination: prometheus

        # metrics.stackdriver-project-id field specifies the Stackdriver project ID. This
        # field is optional. When running on GCE, application default credentials will be
        # used and metrics will be sent to the cluster's project if this field is
        # not provided.
        metrics.stackdriver-project-id: "<your stackdriver project id>"

        # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed
        # to send metrics to Stackdriver using "global" resource type and custom
        # metric type. Setting this flag to "true" could cause extra Stackdriver
        # charge.  If metrics.backend-destination is not Stackdriver, this is
        # ignored.
        metrics.allow-stackdriver-custom-metrics: "false"

    ---
    # Copyright 2020 Tekton Authors LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-registry-cert
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    # data:
    #  # Registry's self-signed certificate
    #  cert: |

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: tekton-pipelines-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.27.3"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.27.3"
        # labels below are related to istio and should not be used for resource lookup
        version: "v0.27.3"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: controller
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: default
          app.kubernetes.io/part-of: tekton-pipelines
      template:
        metadata:
          labels:
            app.kubernetes.io/name: controller
            app.kubernetes.io/component: controller
            app.kubernetes.io/instance: default
            app.kubernetes.io/version: "v0.27.3"
            app.kubernetes.io/part-of: tekton-pipelines
            # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
            pipeline.tekton.dev/release: "v0.27.3"
            # labels below are related to istio and should not be used for resource lookup
            app: tekton-pipelines-controller
            version: "v0.27.3"
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/os
                        operator: NotIn
                        values:
                          - windows
          serviceAccountName: tekton-pipelines-controller
          containers:
            - name: tekton-pipelines-controller
              image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/controller:v0.27.3@sha256:364e0fde644f39a8e2c622d545bc792831270e2fb2076a97363b5cc38446138c
              args: [
                # These images are built on-demand by `ko resolve` and are replaced
                # by image references by digest.
                "-kubeconfig-writer-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter:v0.27.3@sha256:ad7e35271347eb966e31e62f9301b7ee9072f14d25023fc6cfb46b7a7dba9c80", "-git-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.3@sha256:ff55dec12cfd227cc3fa381befe1b49c1a301c481d3a416109cb6bc54c8c7d12", "-entrypoint-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/entrypoint:v0.27.3@sha256:c60dd03cda4506c36c40625ee5a963fefc4721d076f30efb191c7268bef8dd72", "-nop-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/nop:v0.27.3@sha256:725760d6347f91deb6271998cf614a31dad54ba8dbe9fef5ac66256ac15973a2", "-imagedigest-exporter-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.27.3@sha256:de7efad55330564841300537dfa43c45a5bdcbbb70685bb320bd7872dcbdc395", "-pr-image", "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/pullrequest-init:v0.27.3@sha256:d6c457a40e0648775d5651f3d80866c9eb43533a94a9f7d461f0e6dae507d0af",
                # This is gcr.io/google.com/cloudsdktool/cloud-sdk:302.0.0-slim
                "-gsutil-image", "gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:27b2c22bf259d9bc1a291e99c63791ba0c27a04d2db0a43241ba0f1f20f4067f",
                # The shell image must be root in order to create directories and copy files to PVCs.
                # gcr.io/distroless/base:debug as of Apirl 17, 2021
                # image shall not contains tag, so it will be supported on a runtime like cri-o
                "-shell-image", "gcr.io/distroless/base@sha256:aa4fd987555ea10e1a4ec8765da8158b5ffdfef1e72da512c7ede509bc9966c4"]
              volumeMounts:
                - name: config-logging
                  mountPath: /etc/config-logging
                - name: config-registry-cert
                  mountPath: /etc/config-registry-cert
              env:
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                # These phony AWS credentials are here to work around a bug in the aws go sdk
                # that causes extremely long delays in the execution of tasks after the initial
                # deployment of the Tekton Pipelines controller. See issue https://github.com/tektoncd/pipeline/issues/4087
                # for more information.
                - name: AWS_ACCESS_KEY_ID
                  value: foobarbaz
                - name: AWS_SECRET_ACCESS_KEY
                  value: foobarbaz
                - name: AWS_DEFAULT_REGION
                  value: foobarbaz
                # If you are changing these names, you will also need to update
                # the controller's Role in 200-role.yaml to include the new
                # values in the "configmaps" "get" rule.
                - name: CONFIG_DEFAULTS_NAME
                  value: config-defaults
                - name: CONFIG_LOGGING_NAME
                  value: config-logging
                - name: CONFIG_OBSERVABILITY_NAME
                  value: config-observability
                - name: CONFIG_ARTIFACT_BUCKET_NAME
                  value: config-artifact-bucket
                - name: CONFIG_ARTIFACT_PVC_NAME
                  value: config-artifact-pvc
                - name: CONFIG_FEATURE_FLAGS_NAME
                  value: feature-flags
                - name: CONFIG_LEADERELECTION_NAME
                  value: config-leader-election
                - name: SSL_CERT_FILE
                  value: /etc/config-registry-cert/cert
                - name: SSL_CERT_DIR
                  value: /etc/ssl/certs
                - name: METRICS_DOMAIN
                  value: tekton.dev/pipeline
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - all
                # User 65532 is the distroless nonroot user ID
                runAsUser: 65532
                runAsGroup: 65532
              ports:
                - name: probes
                  containerPort: 8080
              livenessProbe:
                httpGet:
                  path: /health
                  port: probes
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: probes
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
          volumes:
            - name: config-logging
              configMap:
                name: config-logging
            - name: config-registry-cert
              configMap:
                name: config-registry-cert
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.27.3"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.27.3"
        # labels below are related to istio and should not be used for resource lookup
        app: tekton-pipelines-controller
        version: "v0.27.3"
      name: tekton-pipelines-controller
      namespace: tekton-pipelines
    spec:
      ports:
        - name: http-metrics
          port: 9090
          protocol: TCP
          targetPort: 9090
        - name: probes
          port: 8080
      selector:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: autoscaling/v2beta1
    kind: HorizontalPodAutoscaler
    metadata:
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.27.3"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.27.3"
        # labels below are related to istio and should not be used for resource lookup
        version: "v0.27.3"
    spec:
      minReplicas: 1
      maxReplicas: 5
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: tekton-pipelines-webhook
      metrics:
        - type: Resource
          resource:
            name: cpu
            targetAverageUtilization: 100

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apps/v1
    kind: Deployment
    metadata:
      # Note: the Deployment name must be the same as the Service name specified in
      # config/400-webhook-service.yaml. If you change this name, you must also
      # change the value of WEBHOOK_SERVICE_NAME below.
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.27.3"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.27.3"
        # labels below are related to istio and should not be used for resource lookup
        version: "v0.27.3"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: default
          app.kubernetes.io/part-of: tekton-pipelines
      template:
        metadata:
          labels:
            app.kubernetes.io/name: webhook
            app.kubernetes.io/component: webhook
            app.kubernetes.io/instance: default
            app.kubernetes.io/version: "v0.27.3"
            app.kubernetes.io/part-of: tekton-pipelines
            # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
            pipeline.tekton.dev/release: "v0.27.3"
            # labels below are related to istio and should not be used for resource lookup
            app: tekton-pipelines-webhook
            version: "v0.27.3"
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/os
                        operator: NotIn
                        values:
                          - windows
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: webhook
                        app.kubernetes.io/component: webhook
                        app.kubernetes.io/instance: default
                        app.kubernetes.io/part-of: tekton-pipelines
                    topologyKey: kubernetes.io/hostname
                  weight: 100
          serviceAccountName: tekton-pipelines-webhook
          containers:
            - name: webhook
              # This is the Go import path for the binary that is containerized
              # and substituted here.
              image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/webhook:v0.27.3@sha256:54cb380aaa4f611eef996d982fd6052a793b54cd6092b12a46bb8afd16124aca
              # Resource request required for autoscaler to take any action for a metric
              resources:
                requests:
                  cpu: 100m
                  memory: 100Mi
                limits:
                  cpu: 500m
                  memory: 500Mi
              env:
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                # If you are changing these names, you will also need to update
                # the webhook's Role in 200-role.yaml to include the new
                # values in the "configmaps" "get" rule.
                - name: CONFIG_LOGGING_NAME
                  value: config-logging
                - name: CONFIG_OBSERVABILITY_NAME
                  value: config-observability
                - name: CONFIG_LEADERELECTION_NAME
                  value: config-leader-election
                - name: WEBHOOK_SERVICE_NAME
                  value: tekton-pipelines-webhook
                - name: WEBHOOK_SECRET_NAME
                  value: webhook-certs
                - name: METRICS_DOMAIN
                  value: tekton.dev/pipeline
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - all
                # User 65532 is the distroless nonroot user ID
                runAsUser: 65532
                runAsGroup: 65532
              ports:
                - name: metrics
                  containerPort: 9090
                - name: profiling
                  containerPort: 8008
                - name: https-webhook
                  containerPort: 8443
                - name: probes
                  containerPort: 8080
              livenessProbe:
                httpGet:
                  path: /health
                  port: probes
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: probes
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.27.3"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.27.3"
        # labels below are related to istio and should not be used for resource lookup
        app: tekton-pipelines-webhook
        version: "v0.27.3"
      name: tekton-pipelines-webhook
      namespace: tekton-pipelines
    spec:
      ports:
        # Define metrics and profiling for them to be accessible within service meshes.
        - name: http-metrics
          port: 9090
          targetPort: 9090
        - name: http-profiling
          port: 8008
          targetPort: 8008
        - name: https-webhook
          port: 443
          targetPort: 8443
        - name: probes
          port: 8080
      selector:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines

    ---
  tekton-trigger-interceptors.yaml: |
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: tekton-triggers-core-interceptors
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: core-interceptors
        app.kubernetes.io/component: interceptors
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        # tekton.dev/release value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
        triggers.tekton.dev/release: "v0.16.0"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: core-interceptors
          app.kubernetes.io/component: interceptors
          app.kubernetes.io/instance: default
          app.kubernetes.io/part-of: tekton-triggers
      template:
        metadata:
          labels:
            app.kubernetes.io/name: core-interceptors
            app.kubernetes.io/component: interceptors
            app.kubernetes.io/instance: default
            app.kubernetes.io/version: "v0.16.0"
            app.kubernetes.io/part-of: tekton-triggers
            app: tekton-triggers-core-interceptors
            triggers.tekton.dev/release: "v0.16.0"
            # version value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
            version: "v0.16.0"
        spec:
          serviceAccountName: tekton-triggers-core-interceptors
          containers:
            - name: tekton-triggers-core-interceptors
              image: "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/interceptors:v0.16.0@sha256:6c7db03e0caf6fab13192b54ececd53926beae759efe9cbe1aa709cd707be687"
              args: ["-logtostderr", "-stderrthreshold", "INFO"]
              env:
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: CONFIG_LOGGING_NAME
                  value: config-logging-triggers
                - name: CONFIG_OBSERVABILITY_NAME
                  value: config-observability-triggers
                - name: METRICS_DOMAIN
                  value: tekton.dev/triggers
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8082
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
              securityContext:
                allowPrivilegeEscalation: false
                # User 65532 is the distroless nonroot user ID
                runAsUser: 65532
                runAsGroup: 65532
                capabilities:
                  drop:
                    - all
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: tekton-triggers-core-interceptors
        app.kubernetes.io/component: interceptors
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        app: tekton-triggers-core-interceptors
        version: "v0.16.0"
      name: tekton-triggers-core-interceptors
      namespace: tekton-pipelines
    spec:
      ports:
        - name: "http"
          port: 80
          targetPort: 8082
      selector:
        app.kubernetes.io/name: core-interceptors
        app.kubernetes.io/component: interceptors
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: triggers.tekton.dev/v1alpha1
    kind: ClusterInterceptor
    metadata:
      name: cel
    spec:
      clientConfig:
        service:
          name: tekton-triggers-core-interceptors
          namespace: tekton-pipelines
          path: "cel"
    ---
    apiVersion: triggers.tekton.dev/v1alpha1
    kind: ClusterInterceptor
    metadata:
      name: bitbucket
    spec:
      clientConfig:
        service:
          name: tekton-triggers-core-interceptors
          namespace: tekton-pipelines
          path: "bitbucket"
    ---
    apiVersion: triggers.tekton.dev/v1alpha1
    kind: ClusterInterceptor
    metadata:
      name: github
    spec:
      clientConfig:
        service:
          name: tekton-triggers-core-interceptors
          namespace: tekton-pipelines
          path: "github"
    ---
    apiVersion: triggers.tekton.dev/v1alpha1
    kind: ClusterInterceptor
    metadata:
      name: gitlab
    spec:
      clientConfig:
        service:
          name: tekton-triggers-core-interceptors
          namespace: tekton-pipelines
          path: "gitlab"

    ---
  tekton-trigger-release.yaml: |
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      name: tekton-triggers
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    spec:
      privileged: false
      allowPrivilegeEscalation: false
      volumes:
        - 'emptyDir'
        - 'configMap'
        - 'secret'
      hostNetwork: false
      hostIPC: false
      hostPID: false
      runAsUser:
        rule: 'MustRunAsNonRoot'
      seLinux:
        rule: 'RunAsAny'
      supplementalGroups:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535
      fsGroup:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-admin
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: [""]
        resources: ["configmaps", "services", "events"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "deployments/finalizers"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["admissionregistration.k8s.io"]
        resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["triggers.tekton.dev"]
        resources: ["clustertriggerbindings", "clusterinterceptors", "eventlisteners", "triggerbindings", "triggertemplates", "triggers", "eventlisteners/finalizers"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["triggers.tekton.dev"]
        resources: ["clustertriggerbindings/status", "clusterinterceptors/status", "eventlisteners/status", "triggerbindings/status", "triggertemplates/status", "triggers/status"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      # We uses leases for leaderelection
      - apiGroups: ["coordination.k8s.io"]
        resources: ["leases"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
      - apiGroups: ["serving.knative.dev"]
        resources: ["*", "*/status", "*/finalizers"]
        verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]
      - apiGroups: [""]
        resources: ["namespaces"]
        verbs: ["get"]
        # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
        # which requires we can Get the system namespace.
        resourceNames: ["tekton-pipelines"]
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-core-interceptors
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-triggers-eventlistener-roles
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: ["triggers.tekton.dev"]
        resources: ["eventlisteners", "triggerbindings", "triggertemplates", "triggers"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["tekton.dev"]
        resources: ["pipelineruns", "pipelineresources", "taskruns"]
        verbs: ["create"]
      - apiGroups: [""]
        resources: ["serviceaccounts"]
        verbs: ["impersonate"]
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-triggers"]
        verbs: ["use"]
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-eventlistener-clusterroles
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: ["triggers.tekton.dev"]
        resources: ["clustertriggerbindings", "clusterinterceptors"]
        verbs: ["get", "list", "watch"]

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # NOTE:  when multi-tenant EventListener progresses, moving this Role
    # to a ClusterRole is not the advisable path.  Additional Roles that
    # adds access to Secrets to the Namespaces managed by the multi-tenant
    # EventListener is what should be done.  While not as simple, it avoids
    # giving access to K8S system level, cluster admin privileged level Secrets

    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-admin
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-triggers"]
        verbs: ["use"]
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-admin-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-triggers"]
        verbs: ["use"]
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tekton-triggers-core-interceptors
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies"]
        resourceNames: ["tekton-triggers"]
        verbs: ["use"]
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: tekton-triggers-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    rules:
      # All system:authenticated users needs to have access
      # of the triggers-info ConfigMap even if they don't
      # have access to the other resources present in the
      # installed namespace.
      - apiGroups: [""]
        resources: ["configmaps"]
        resourceNames: ["triggers-info"]
        verbs: ["get"]

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tekton-triggers-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tekton-triggers-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tekton-triggers-core-interceptors
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-triggers-controller-admin
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-controller
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-triggers-admin
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-triggers-webhook-admin
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-webhook
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-triggers-admin
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: tekton-triggers-core-interceptors
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-core-interceptors
        namespace: tekton-pipelines
    roleRef:
      kind: ClusterRole
      name: tekton-triggers-core-interceptors
      apiGroup: rbac.authorization.k8s.io

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-triggers-controller-admin
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-controller
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-triggers-admin
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-triggers-webhook-admin
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-webhook
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-triggers-admin-webhook
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-triggers-core-interceptors
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      - kind: ServiceAccount
        name: tekton-triggers-core-interceptors
        namespace: tekton-pipelines
    roleRef:
      kind: Role
      name: tekton-triggers-core-interceptors
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: tekton-triggers-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    subjects:
      # Giving all system:authenticated users the access of the
      # ConfigMap which contains version information.
      - kind: Group
        name: system:authenticated
        apiGroup: rbac.authorization.k8s.io
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: tekton-triggers-info

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: clusterinterceptors.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Cluster
      names:
        kind: ClusterInterceptor
        plural: clusterinterceptors
        singular: clusterinterceptor
        shortNames:
          - ci
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1alpha1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: clustertriggerbindings.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Cluster
      names:
        kind: ClusterTriggerBinding
        plural: clustertriggerbindings
        singular: clustertriggerbinding
        shortNames:
          - ctb
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          subresources:
            status: {}
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          subresources:
            status: {}

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: eventlisteners.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Namespaced
      names:
        kind: EventListener
        plural: eventlisteners
        singular: eventlistener
        shortNames:
          - el
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1beta1
          served: true
          storage: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          additionalPrinterColumns:
            - name: Address
              type: string
              jsonPath: .status.address.url
            - name: Available
              type: string
              jsonPath: ".status.conditions[?(@.type=='Available')].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type=='Available')].reason"
            - name: Ready
              type: string
              jsonPath: ".status.conditions[?(@.type=='Ready')].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type=='Ready')].reason"
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
          additionalPrinterColumns:
            - name: Address
              type: string
              jsonPath: .status.address.url
            - name: Available
              type: string
              jsonPath: ".status.conditions[?(@.type=='Available')].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type=='Available')].reason"
            - name: Ready
              type: string
              jsonPath: ".status.conditions[?(@.type=='Ready')].status"
            - name: Reason
              type: string
              jsonPath: ".status.conditions[?(@.type=='Ready')].reason"

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: triggers.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Namespaced
      names:
        kind: Trigger
        plural: triggers
        singular: trigger
        shortNames:
          - tri
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          subresources:
            status: {}
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: triggerbindings.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Namespaced
      names:
        kind: TriggerBinding
        plural: triggerbindings
        singular: triggerbinding
        shortNames:
          - tb
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: triggertemplates.triggers.tekton.dev
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        version: "v0.16.0"
    spec:
      group: triggers.tekton.dev
      scope: Namespaced
      names:
        kind: TriggerTemplate
        plural: triggertemplates
        singular: triggertemplate
        shortNames:
          - tt
        categories:
          - tekton
          - tekton-triggers
      versions:
        - name: v1beta1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}
        - name: v1alpha1
          served: true
          storage: false
          schema:
            openAPIV3Schema:
              type: object
              # One can use x-kubernetes-preserve-unknown-fields: true
              # at the root of the schema (and inside any properties, additionalProperties)
              # to get the traditional CRD behaviour that nothing is pruned, despite
              # setting spec.preserveUnknownProperties: false.
              #
              # See https://kubernetes.io/blog/2019/06/20/crd-structural-schema/
              # See issue: https://github.com/knative/serving/issues/912
              x-kubernetes-preserve-unknown-fields: true
          # Opt into the status subresource so metadata.generation
          # starts to increment
          subresources:
            status: {}

    ---
    # Copyright 2020 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: Secret
    metadata:
      name: triggers-webhook-certs
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
    # The data is populated at install time.
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: validation.webhook.triggers.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
    webhooks:
      - admissionReviewVersions:
          - v1beta1
          - v1
        clientConfig:
          service:
            name: tekton-triggers-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: validation.webhook.triggers.tekton.dev
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: MutatingWebhookConfiguration
    metadata:
      name: webhook.triggers.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
    webhooks:
      - admissionReviewVersions:
          - v1beta1
          - v1
        clientConfig:
          service:
            name: tekton-triggers-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: webhook.triggers.tekton.dev
    ---
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: config.webhook.triggers.tekton.dev
      labels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
    webhooks:
      - admissionReviewVersions:
          - v1beta1
          - v1
        clientConfig:
          service:
            name: tekton-triggers-webhook
            namespace: tekton-pipelines
        failurePolicy: Fail
        sideEffects: None
        name: config.webhook.triggers.tekton.dev
        namespaceSelector:
          matchExpressions:
            - key: triggers.tekton.dev/release
              operator: Exists

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-triggers-aggregate-edit
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        rbac.authorization.k8s.io/aggregate-to-edit: "true"
        rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rules:
      - apiGroups:
          - triggers.tekton.dev
        resources:
          - clustertriggerbindings
          - clusterinterceptors
          - eventlisteners
          - triggers
          - triggerbindings
          - triggertemplates
        verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-triggers-aggregate-view
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
        rbac.authorization.k8s.io/aggregate-to-view: "true"
    rules:
      - apiGroups:
          - triggers.tekton.dev
        resources:
          - clustertriggerbindings
          - clusterinterceptors
          - eventlisteners
          - triggers
          - triggerbindings
          - triggertemplates
        verbs:
          - get
          - list
          - watch

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-defaults-triggers
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    data:
      _example: |
        ################################
        #                              #
        #    EXAMPLE CONFIGURATION     #
        #                              #
        ################################

        # This block is not actually functional configuration,
        # but serves to illustrate the available configuration
        # options and document them in a way that is accessible
        # to users that `kubectl edit` this config map.
        #
        # These sample configuration options may be copied out of
        # this example block and unindented to be in the data block
        # to actually change the configuration.

        # default-service-account contains the default service account name
        # to use for TaskRun and PipelineRun, if none is specified.
        default-service-account: "default"

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: feature-flags-triggers
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-pipelines
    data:
      # Setting this flag will determine which gated features are enabled.
      # Acceptable values are "stable" or "alpha".
      enable-api-fields: "stable"

    ---
    # Copyright 2021 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: triggers-info
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    data:
      # Contains triggers version which can be queried by external
      # tools such as CLI. Elevated permissions are already given to
      # this ConfigMap such that even if we don't have access to
      # other resources in the namespace we still can have access to
      # this ConfigMap.
      version: "v0.16.0"

    ---
    # Copyright 2019 Tekton Authors LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-logging-triggers
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    data:
      # Common configuration for all knative codebase
      zap-logger-config: |
        {
          "level": "info",
          "development": false,
          "sampling": {
            "initial": 100,
            "thereafter": 100
          },
          "outputPaths": ["stdout"],
          "errorOutputPaths": ["stderr"],
          "encoding": "json",
          "encoderConfig": {
            "timeKey": "ts",
            "levelKey": "level",
            "nameKey": "logger",
            "callerKey": "caller",
            "messageKey": "msg",
            "stacktraceKey": "stacktrace",
            "lineEnding": "",
            "levelEncoder": "",
            "timeEncoder": "iso8601",
            "durationEncoder": "",
            "callerEncoder": ""
          }
        }
      # Log level overrides
      loglevel.controller: "info"
      loglevel.webhook: "info"
      loglevel.eventlistener: "info"

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: config-observability-triggers
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers
    data:
      _example: |
        ################################
        #                              #
        #    EXAMPLE CONFIGURATION     #
        #                              #
        ################################

        # This block is not actually functional configuration,
        # but serves to illustrate the available configuration
        # options and document them in a way that is accessible
        # to users that `kubectl edit` this config map.
        #
        # These sample configuration options may be copied out of
        # this example block and unindented to be in the data block
        # to actually change the configuration.

        # metrics.backend-destination field specifies the system metrics destination.
        # It supports either prometheus (the default) or stackdriver.
        # Note: Using stackdriver will incur additional charges
        metrics.backend-destination: prometheus

        # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
        # field is optional. When running on GCE, application default credentials will be
        # used if this field is not provided.
        metrics.stackdriver-project-id: "<your stackdriver project id>"

        # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
        # Stackdriver using "global" resource type and custom metric type if the
        # metrics are not supported by "knative_revision" resource type. Setting this
        # flag to "true" could cause extra Stackdriver charge.
        # If metrics.backend-destination is not Stackdriver, this is ignored.
        metrics.allow-stackdriver-custom-metrics: "false"

    ---
    # Copyright 2019 Tekton Authors LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        triggers.tekton.dev/release: "v0.16.0"
        app: tekton-triggers-controller
        version: "v0.16.0"
      name: tekton-triggers-controller
      namespace: tekton-pipelines
    spec:
      ports:
        - name: http-metrics
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: tekton-triggers-controller
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        # tekton.dev/release value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
        triggers.tekton.dev/release: "v0.16.0"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: controller
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: default
          app.kubernetes.io/part-of: tekton-triggers
      template:
        metadata:
          labels:
            app.kubernetes.io/name: controller
            app.kubernetes.io/component: controller
            app.kubernetes.io/instance: default
            app.kubernetes.io/version: "v0.16.0"
            app.kubernetes.io/part-of: tekton-triggers
            app: tekton-triggers-controller
            triggers.tekton.dev/release: "v0.16.0"
            # version value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
            version: "v0.16.0"
        spec:
          serviceAccountName: tekton-triggers-controller
          containers:
            - name: tekton-triggers-controller
              image: "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller:v0.16.0@sha256:6d23285b419b29cfe1934fc2d09e680c3deee3f3bebc4e97ba66d140f448ce4d"
              args: ["-logtostderr", "-stderrthreshold", "INFO", "-el-image", "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.16.0@sha256:97bcbbce4f592c6bf15c8811adf445d028f58ff5b38e24467d30d727dd919638", "-el-port", "8080", "-el-security-context=true", "-el-readtimeout", "5", "-el-writetimeout", "40", "-el-idletimeout", "120", "-el-timeouthandler", "30", "-period-seconds", "10", "-failure-threshold", "1"]
              env:
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: CONFIG_LOGGING_NAME
                  value: config-logging-triggers
                - name: CONFIG_OBSERVABILITY_NAME
                  value: config-observability-triggers
                - name: CONFIG_DEFAULTS_NAME
                  value: config-defaults-triggers
                - name: METRICS_DOMAIN
                  value: tekton.dev/triggers
                - name: METRICS_PROMETHEUS_PORT
                  value: "9000"
              securityContext:
                allowPrivilegeEscalation: false
                # User 65532 is the distroless nonroot user ID
                runAsUser: 65532

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: v1
    kind: Service
    metadata:
      name: tekton-triggers-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        app: tekton-triggers-webhook
        version: "v0.16.0"
        triggers.tekton.dev/release: "v0.16.0"
    spec:
      ports:
        - name: https-webhook
          port: 443
          targetPort: 8443
      selector:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/part-of: tekton-triggers

    ---
    # Copyright 2019 The Tekton Authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: tekton-triggers-webhook
      namespace: tekton-pipelines
      labels:
        app.kubernetes.io/name: webhook
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.16.0"
        app.kubernetes.io/part-of: tekton-triggers
        # tekton.dev/release value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
        triggers.tekton.dev/release: "v0.16.0"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: default
          app.kubernetes.io/part-of: tekton-triggers
      template:
        metadata:
          labels:
            app.kubernetes.io/name: webhook
            app.kubernetes.io/component: webhook
            app.kubernetes.io/instance: default
            app.kubernetes.io/version: "v0.16.0"
            app.kubernetes.io/part-of: tekton-triggers
            app: tekton-triggers-webhook
            triggers.tekton.dev/release: "v0.16.0"
            # version value replaced with inputs.params.versionTag in triggers/tekton/publish.yaml
            version: "v0.16.0"
        spec:
          serviceAccountName: tekton-triggers-webhook
          containers:
            - name: webhook
              # This is the Go import path for the binary that is containerized
              # and substituted here.
              image: "gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook:v0.16.0@sha256:8b7dae4129dcae154fdcd5870fd4c242fc1ba2aa952ef71cb94c753b0f868324"
              env:
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: CONFIG_LOGGING_NAME
                  value: config-logging-triggers
                - name: WEBHOOK_SERVICE_NAME
                  value: tekton-triggers-webhook
                - name: WEBHOOK_SECRET_NAME
                  value: triggers-webhook-certs
                - name: METRICS_DOMAIN
                  value: tekton.dev/triggers
              ports:
                - name: metrics
                  containerPort: 9000
                - name: profiling
                  containerPort: 8008
                - name: https-webhook
                  containerPort: 8443
              securityContext:
                allowPrivilegeEscalation: false
                # User 65532 is the distroless nonroot user ID
                runAsUser: 65532

    ---
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: tekton-installer-script
  namespace: epoch-system

#---- tekton-installer.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: batch/v1
kind: Job
metadata:
  name: tekton-installer
  namespace: epoch-system
spec:
  template:
    metadata:
      labels:
        app: tekton-installer
    spec:
      restartPolicy: Never
      volumes:
      - name: tekton-installer-script
        configMap:
          name: tekton-installer-script
      containers:
      - name: tekton-installer
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        volumeMounts:
        - mountPath: /tekton-installer-script
          name: tekton-installer-script
        command: ["sh", "-c"]
        args:
          - |
            bash /tekton-installer-script/tekton-installer-script.sh

#---- gitlab-installer-start-script.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  gitlab-installer-start.sh: |+
    #!/bin/bash
    #   Copyright 2022 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    SCRIPT_PATH="/gitlab-installer-start-script"

    echo "---- install gitlab-installer-start.yaml"
    kubectl apply -f ${SCRIPT_PATH}/gitlab-installer-start.yaml

  gitlab-installer-start.yaml: |
    #   Copyright 2022 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.
    apiVersion: v1
    kind: Namespace
    metadata:
      name: gitlab

    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: gitlab-installer
      namespace: gitlab

    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: gitlab-installer-crole
    rules:
     - apiGroups: [""]
       resources: ["persistentvolumes"]
       verbs: ["get", "list", "watch", "create", "update", "patch"]

    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
     name: gitlab-installer-crolebinding
    subjects:
    - kind: ServiceAccount
      name: gitlab-installer
      namespace: gitlab
    roleRef:
      kind: ClusterRole
      name: gitlab-installer-crole
      apiGroup: rbac.authorization.k8s.io

    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
     name: gitlab-installer-admin-rolebinding
    subjects:
    - kind: ServiceAccount
      name: gitlab-installer
      namespace: gitlab
    roleRef:
      kind: ClusterRole
      name: cluster-admin
      apiGroup: rbac.authorization.k8s.io

    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
     name: gitlab-installer-rolebinding
     namespace: gitlab
    subjects:
    - kind: ServiceAccount
      name: gitlab-installer
      namespace: gitlab
    roleRef:
      kind: ClusterRole
      name: admin
      apiGroup: rbac.authorization.k8s.io

    ---
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: gitlab-installer
      namespace: gitlab
    spec:
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never
          volumes:
          - name: gitlab-pv
            hostPath:
              path: /var/data/epoch/gitlab
              type: DirectoryOrCreate
          serviceAccount: gitlab-installer
          serviceAccountName: gitlab-installer
          containers:
          - name: gitlab-installer
            image: exastro/epoch-gitlab-installer:1.0.0_20220415_1000
            volumeMounts:
            - mountPath: /gitlab-pv
              name: gitlab-pv
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: gitlab-installer-start-script
  namespace: epoch-system

#---- gitlab-installer-start.yaml
---
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-installer-start
  namespace: epoch-system
spec:
  template:
    metadata:
      labels:
        app: gitlab-installer-start
    spec:
      restartPolicy: Never
      volumes:
      - name: gitlab-installer-start-script
        configMap:
          name: gitlab-installer-start-script
      containers:
      - name: gitlab-installer-start
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        volumeMounts:
        - mountPath: /gitlab-installer-start-script
          name: gitlab-installer-start-script
        command: ["sh", "-c"]
        args:
          - |
            bash /gitlab-installer-start-script/gitlab-installer-start.sh

#---- epoch-setting-tools-script.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  common-import-logger.sh: |+
    #!/bin/bash
    #   Copyright 2021 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    LOGFILE="/var/log/epoch/epoch-setting-tools.log.`TZ=JST-9 date '+%Y%m%d'`"
    _LOGNAME=$1

    function logger() {
        LOG_LEVEL=$1
        LOG_MESSAGE=$2
        LOG_TEXT="[`TZ=JST-9 date '+%Y/%m/%d %H:%M:%S'`][${_LOGNAME}][${LOG_LEVEL}] ${LOG_MESSAGE}"
        if [ "${LOG_LEVEL}" != "DEBUG" ]; then
            echo "[${LOG_LEVEL}] ${LOG_MESSAGE}"
        fi
        echo "${LOG_TEXT}" > /proc/1/fd/1
        echo "${LOG_TEXT}" >> "${LOGFILE}"
    }

  get-gitlab-initial-root-password.sh: |+
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    echo -n "gitlab root initial password : "
    kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' -n gitlab | base64 --decode
    echo ""

  get-keycloak-initial-admin-password.sh: |+
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    echo -n "keycloak admin password : "
    kubectl get secret  exastro-platform-authentication-infra-secret -n exastro-platform-authentication-infra -o json | jq -r ".data.KEYCLOAK_PASSWORD" | base64 -d
    echo ""

  get-workspace-tools-account.sh: |
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    if [ $# -ne 1 ]; then
        echo "Usage : `basename $0` workspace_id"
        exit 1
    fi

    curl http://epoch-rs-workspace-api:8000/workspace/${1}/access
  set-host-gitlab.sh: |
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.
    BASENAME=$(basename "$0")
    CMD_RESULT="/tmp/result.$$"
    LF='
    '
    source "`dirname $0`/common-import-logger.sh" "${BASENAME}"

    logger "INFO" "START : set-host-gitlab.sh"

    GITLAB_NAMESPACE="gitlab"
    GITLAB_INSTALL_CHECK_TIMES=360
    GIT_API_BASE="http://gitlab-webservice-default.${GITLAB_NAMESPACE}.svc:8181"

    #
    # check parameter
    #
    if [ $# -ne 1 ]; then
        logger "ERROR" "Usage : ${BASENAME} [hostname or IPaddress]"
        logger "ERROR" "Check the parameters and try again"
        exit 1
    fi

    PRM_MY_HOST="$1"
    logger "INFO" "PARAM PRM_MY_HOST : ${PRM_MY_HOST}"

    GITLAB_CLONE_URL="https://${PRM_MY_HOST}:31183/"

    logger "INFO" "START : Wait Gitlab Installer finished"

    INSTALLER_STATUS=""
    for ((i=1; i<=${GITLAB_INSTALL_CHECK_TIMES}; i++)); do
        sleep 10;
        INSTALLER_STATUS=$(kubectl get job/gitlab-installer -n ${GITLAB_NAMESPACE} -o "jsonpath={.status.conditions[0].type}")
        if [ $? -ne 0 ]; then
            continue;
        fi
        if [ "${INSTALLER_STATUS}" = "Complete" ]; then
            break;
        fi
        if [ "${INSTALLER_STATUS}" = "Error" ]; then
            logger "ERROR" "CANCELED : because the installation failed"
            exit 1
        fi
    done
    if [ "${INSTALLER_STATUS}" != "Complete" ]; then
        logger "ERROR" "CANCELED : because the installation wait timeout"
        exit 1
    fi

    logger "INFO" "START : Get TOKEN"
    TOKEN=$(kubectl get secret gitlab-root-token -n ${GITLAB_NAMESPACE} -o jsonpath='{.data.TOKEN}' | base64 --decode)
    if [ $? -ne 0 ]; then
        logger "ERROR" "CANCELED : Failed to get token"
        exit 1
    fi

    logger "INFO" "START : Encode CLONE URL"
    GITLAB_CLONE_URL_ENC=$(echo "${GITLAB_CLONE_URL}" | perl -nle 's/([^\w ])/"%".unpack("H2",$1)/eg; s/ /\+/g; print')
    if [ $? -ne 0 ]; then
        logger "ERROR" "encode clone url"
        exit 1
    fi

    logger "INFO" "START : Setting custom_http_clone_url_root"
    SUCCEED_SETTING=0

    STATUS_CODE=$(
        curl -X PUT \
        -H 'Content-Type: application/json' \
        -H "PRIVATE-TOKEN: ${TOKEN}" \
        -w '%{http_code}\n' -o /dev/null \
        "${GIT_API_BASE}/api/v4/application/settings?custom_http_clone_url_root=${GITLAB_CLONE_URL_ENC}" \
    )
    logger "INFO" "Setting custom_http_clone_url_root STATUS_CODE:${STATUS_CODE}"

    if [ $? -ne 0 -o "${STATUS_CODE}" != "200" ]; then
        logger "ERROR" "configuration was failed"
        exit 1
    fi

    logger "INFO" "configuration was successful"
    exit 0
  set-host.sh: "#!/bin/bash\n#   Copyright 2021 NEC Corporation\n#\n#   Licensed under
    the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file
    except in compliance with the License.\n#   You may obtain a copy of the License
    at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required
    by applicable law or agreed to in writing, software\n#   distributed under the
    License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.\n#   See the License for the specific
    language governing permissions and\n#   limitations under the License.\n\n\nBASENAME=$(basename
    \"$0\")\nCMD_RESULT=\"/tmp/result.$$\"\nLF='\n'\nsource \"`dirname $0`/common-import-logger.sh\"
    \"${BASENAME}\"\n\nlogger \"INFO\" \"START : ${BASENAME}\"\n\n#\n# Initialize
    variables\n#\nSTEP=0\nALLSTEPS=7\nREST_HOST=\"http://keycloak.exastro-platform-authentication-infra.svc:8080/\"\nREALM=\"master\"\n\n#\n#
    check parameter\n#\nif [ $# -ne 1 ]; then\n    logger \"ERROR\" \"Usage : ${BASENAME}
    [hostname or IPaddress]\"\n    logger \"ERROR\" \"Check the parameters and try
    again\"\n    exit 1\nfi\n\nPRM_MY_HOST=\"$1\"\nlogger \"INFO\" \"PARAM PRM_MY_HOST
    : ${PRM_MY_HOST}\"\n\n#\n# Initial password check\n#\nSAVE_INFRA_SECRET=$(kubectl
    get secret exastro-platform-authentication-infra-secret -n exastro-platform-authentication-infra
    -o json)\nSAVE_OIDC_PASSPHRASE_B64=$(echo -n \"${SAVE_INFRA_SECRET}\" | jq -r
    \".data.SAVE_GATEWAY_CRYPTO_PASSPHRASE\")\nSAVE_KEYCLOAK_PASS_B64=$(echo -n \"${SAVE_INFRA_SECRET}\"
    | jq -r \".data.SAVE_KEYCLOAK_PASSWORD\")\nif [ -n \"$SAVE_KEYCLOAK_PASS_B64\"
    -a \"${SAVE_KEYCLOAK_PASS_B64}\" != \"null\" ]; then\n\n    SAVE_KEYCLOAK_PASS=$(echo
    -n \"${SAVE_KEYCLOAK_PASS_B64}\" | base64 -d)\n    #\n    # get token check\n
    \   #\n    BEAR=$(curl -k -s \\\n        -d \"client_id=admin-cli\" \\\n        -d
    \"username=admin\" \\\n        -d \"password=${SAVE_KEYCLOAK_PASS}\" \\\n        -d
    \"grant_type=password\" \\\n        \"${REST_HOST}auth/realms/${REALM}/protocol/openid-connect/token\"
    | jq -r \".access_token\")\n    if [ $? -ne 0 ]; then\n        logger \"ERROR\"
    \"CALL : KeyCloak Token check error\"\n        logger \"ERROR\" \"KeyCloak cannot
    access the stored information\"\n        exit 2\n    fi\n    if [ \"${BEAR}\"
    = \"\" ]; then\n        logger \"ERROR\" \"KeyCloak cannot access the stored information\"\n
    \       exit 1\n    fi\n\n    kubectl patch secret -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-secret -p \"\\\n    {\\\n        \\\"data\\\"
    : {\\\n            \\\"GATEWAY_CRYPTO_PASSPHRASE\\\" : \\\"${SAVE_OIDC_PASSPHRASE_B64}\\\",\\\n
    \           \\\"KEYCLOAK_PASSWORD\\\" : \\\"${SAVE_KEYCLOAK_PASS_B64}\\\"\\\n
    \       }\\\n    }\" &> \"${CMD_RESULT}\"\n    if [ $? -ne 0 ]; then\n        logger
    \"ERROR\" \"CALL : kubectl patch secret -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-secret${LF}`cat ${CMD_RESULT}`\"\n        logger
    \"ERROR\" \"initialize patch secret exastro-platform-authentication-infra-secret\"\n
    \       exit 2\n    fi\n\n    logger \"ERROR\" \"Cannot initialize because it
    is already set\"\n    exit 1\nfi\n\n#\n# Initialize Setting Parameter\n#\nSTEP=$(expr
    ${STEP} + 1)\nlogger \"INFO\" \"**** STEP : ${STEP} / ${ALLSTEPS} : Initialize
    Setting Parameter ...\"\n\nOIDC_PASSPHRASE=$(< /dev/urandom tr -dc 'a-zA-Z0-9'
    | fold -w 20 | head -n 1 | sort | uniq)\nif [ $? -ne 0 -o -z \"${OIDC_PASSPHRASE}\"
    ]; then\n    logger \"ERROR\" \"Generate OIDC_PASSPHRASE\"\n    exit 2\nfi\n\nOIDC_PASSPHRASE_B64=$(echo
    -n \"${OIDC_PASSPHRASE}\" | base64)\nif [ $? -ne 0 -o -z \"${OIDC_PASSPHRASE_B64}\"
    ]; then\n    logger \"ERROR\" \"Generate OIDC_PASSPHRASE_B64\"\n    exit 2\nfi\n\nKEYCLOAK_ADMIN_PASSW=$(<
    /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1 | sort | uniq)\nif [
    $? -ne 0 -o -z \"${KEYCLOAK_ADMIN_PASSW}\" ]; then\n    logger \"ERROR\" \"Generate
    KEYCLOAK_ADMIN_PASSW\"\n    exit 2\nfi\n\nKEYCLOAK_ADMIN_PASSW_B64=$(echo -n \"${KEYCLOAK_ADMIN_PASSW}\"
    | base64)\nif [ $? -ne 0 -o -z \"${KEYCLOAK_ADMIN_PASSW_B64}\" ]; then\n    logger
    \"ERROR\" \"Generate KEYCLOAK_ADMIN_PASSW_B64\"\n    exit 2\nfi\n\n#\n# wait for
    keycloak pod\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\" \"**** STEP : ${STEP}
    / ${ALLSTEPS} : wait for keycloak pod ...\"\n\necho -n \"waiting ...\"\nwhile
    true; do\n    sleep 3;\n    echo -n \".\";\n    NOT_READY_COUNT=$(\n        kubectl
    get pod -n exastro-platform-authentication-infra -o json 2> /dev/null | \\\n        jq
    -r \".items[].status.containerStatuses[].ready\" 2> /dev/null | sed -e \"/true/d\"
    | wc -l\n    )\n    if [ $? -ne 0 ]; then\n        continue;\n    fi\n    if [
    ${NOT_READY_COUNT} -ne 0 ]; then\n        logger \"DEBUG\" \"STILL: containerStatuses[].ready=false\"\n
    \       continue;\n    fi\n\n    NOT_READY_COUNT=$(\n        kubectl get pod -n
    exastro-platform-authentication-infra -o jsonpath='{range .items[*]}{@.status.phase}{\"\\n\"}'
    | \\\n        sed -e \"/Running/d\" -e \"/Succeeded/d\" -e \"/^$/d\" | \\\n        wc
    -l\n    )\n    if [ $? -ne 0 ]; then\n        continue;\n    fi\n    if [ ${NOT_READY_COUNT}
    -ne 0 ]; then\n        logger \"DEBUG\" \"STILL: status.phase=Not Running/Succeeded\"\n
    \       continue;\n    fi\n\n    RESTART_AFTER_KEYCLOAK_POD=$(kubectl get pod
    --selector \"app=keycloak\" -n exastro-platform-authentication-infra -o jsonpath=\"{range
    .items[*]}{@.metadata.name}{\\\"\\n\\\"}{end}\" 2> /dev/null)\n    if [ $? -ne
    0 ]; then\n        continue;\n    fi\n    if [ `echo \"${RESTART_AFTER_KEYCLOAK_POD}\"
    | wc -l` -gt 1 ]; then\n        logger \"DEBUG\" \"STILL: RESTART_AFTER_KEYCLOAK_POD
    COUNT > 1\"\n        continue;\n    fi\n\n    echo \"\";\n    break;\ndone;\n\n#\n#
    Set parameter to configmap\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\" \"****
    STEP : ${STEP} / ${ALLSTEPS} : Set Parameter To Configmap\"\n\nkubectl patch configmap
    -n epoch-system host-setting-config -p \"\\\n{\\\n    \\\"data\\\" : {\\\n        \\\"EPOCH_HOSTNAME\\\"
    : \\\"${PRM_MY_HOST}\\\"\\\n    }\\\n}\" &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ];
    then\n    logger \"ERROR\" \"CALL : kubectl patch configmap -n epoch-system host-setting-config${LF}`cat
    ${CMD_RESULT}`\"\n    logger \"ERROR\" \"patch configmap host-setting-config\"\n
    \   exit 2\nfi\nlogger \"INFO\" \"CALL : kubectl patch configmap -n epoch-system
    host-setting-config${LF}`cat ${CMD_RESULT}`\"\n\n\nkubectl patch configmap -n
    exastro-platform-authentication-infra exastro-platform-authentication-infra-env
    -p \"\\\n{\\\n    \\\"data\\\" : {\\\n        \\\"EXASTRO_KEYCLOAK_HOST\\\" :
    \\\"${PRM_MY_HOST}\\\"\\\n    }\\\n}\" &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ];
    then\n    logger \"ERROR\" \"CALL : kubectl patch configmap -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-env${LF}`cat ${CMD_RESULT}`\"\n    logger
    \"ERROR\" \"patch configmap exastro-platform-authentication-infra-env\"\n    exit
    2\nfi\nlogger \"INFO\" \"CALL : kubectl patch configmap -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-env${LF}`cat ${CMD_RESULT}`\"\n\n\nkubectl
    patch configmap -n epoch-system epoch-service-api-config -p \"\\\n{\\\n    \\\"data\\\"
    : {\\\n        \\\"EPOCH_EPAI_HOST\\\" : \\\"${PRM_MY_HOST}\\\"\\\n    }\\\n}\"
    &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"CALL : kubectl
    patch configmap -n epoch-system epoch-service-api-config${LF}`cat ${CMD_RESULT}`\"\n
    \   logger \"ERROR\" \"patch configmap epoch-service-api-config\"\n    exit 2\nfi\nlogger
    \"INFO\" \"CALL : kubectl patch configmap -n epoch-system epoch-service-api-config${LF}`cat
    ${CMD_RESULT}`\"\n\n\nkubectl patch secret -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-secret -p \"\\\n{\\\n    \\\"data\\\" :
    {\\\n        \\\"GATEWAY_CRYPTO_PASSPHRASE\\\" : \\\"${OIDC_PASSPHRASE_B64}\\\",\\\n
    \       \\\"KEYCLOAK_PASSWORD\\\" : \\\"${KEYCLOAK_ADMIN_PASSW_B64}\\\"\\\n    }\\\n}\"
    &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"CALL : kubectl
    patch secret -n exastro-platform-authentication-infra exastro-platform-authentication-infra-secret${LF}`cat
    ${CMD_RESULT}`\"\n    logger \"ERROR\" \"patch secret exastro-platform-authentication-infra-secret\"\n
    \   exit 2\nfi\nlogger \"INFO\" \"CALL : kubectl patch secret -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-secret${LF}`cat ${CMD_RESULT}`\"\n\n#\n#
    restart to reflect the settings\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\"
    \"**** STEP : ${STEP} / ${ALLSTEPS} : restart to reflect the settings ...\"\n\nkubectl
    rollout restart deploy -n epoch-system epoch-service-api2 &> \"${CMD_RESULT}\"\nif
    [ $? -ne 0 ]; then\n    logger \"ERROR\" \"CALL : kubectl rollout restart deploy
    -n epoch-system epoch-service-api2${LF}`cat ${CMD_RESULT}`\"\n    logger \"ERROR\"
    \"rollout restart epoch-service-api2\"\n    exit 2\nfi\nlogger \"INFO\" \"CALL
    : kubectl rollout restart deploy -n epoch-system epoch-service-api2${LF}`cat ${CMD_RESULT}`\"\n\nkubectl
    rollout restart deploy -n epoch-system epoch-control-argocd-api &> \"${CMD_RESULT}\"\nif
    [ $? -ne 0 ]; then\n    logger \"ERROR\" \"CALL : kubectl rollout restart deploy
    -n epoch-system epoch-control-argocd-api${LF}`cat ${CMD_RESULT}`\"\n    logger
    \"ERROR\" \"rollout restart epoch-control-argocd-api\"\n    exit 2\nfi\nlogger
    \"INFO\" \"CALL : kubectl rollout restart deploy -n epoch-system epoch-control-argocd-api${LF}`cat
    ${CMD_RESULT}`\"\n\nkubectl rollout restart deploy -n epoch-system epoch-control-ita-api
    &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"CALL : kubectl
    rollout restart deploy -n epoch-system epoch-control-ita-api${LF}`cat ${CMD_RESULT}`\"\n
    \   logger \"ERROR\" \"rollout restart epoch-control-ita-api\"\n    exit 2\nfi\nlogger
    \"INFO\" \"CALL : kubectl rollout restart deploy -n epoch-system epoch-control-ita-api${LF}`cat
    ${CMD_RESULT}`\"\n\nwhile true; do\n    sleep 5;\n    RESTART_BERFORE_API_POD=$(kubectl
    get pod --selector \"name=authentication-infra-api\" -n exastro-platform-authentication-infra
    -o jsonpath=\"{range .items[*]}{@.metadata.name}{\\\"\\n\\\"}{end}\" 2> /dev/null)\n
    \   if [ $? -eq 0 ]; then\n        logger \"DEBUG\" \"RESTART_BERFORE_API_POD=${RESTART_BERFORE_API_POD}\"\n
    \       break;\n    fi\ndone\n\nkubectl rollout restart deploy -n exastro-platform-authentication-infra
    authentication-infra-api &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ]; then\n    logger
    \"ERROR\" \"CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra
    authentication-infra-api${LF}`cat ${CMD_RESULT}`\"\n    logger \"ERROR\" \"rollout
    restart authentication-infra-api\"\n    exit 2\nfi\nlogger \"INFO\" \"CALL : kubectl
    rollout restart deploy -n exastro-platform-authentication-infra authentication-infra-api${LF}`cat
    ${CMD_RESULT}`\"\n\n# while true; do\n#     sleep 5;\n#     RESTART_BERFORE_KEYCLOAK_POD=$(kubectl
    get pod --selector \"app=keycloak\" -n exastro-platform-authentication-infra -o
    jsonpath=\"{range .items[*]}{@.metadata.name}{\\\"\\n\\\"}{end}\" 2> /dev/null)\n#
    \    if [ $? -eq 0 ]; then\n#         logger \"DEBUG\" \"RESTART_BERFORE_KEYCLOAK_POD=${RESTART_BERFORE_KEYCLOAK_POD}\"\n#
    \        break;\n#     fi\n# done\n# kubectl rollout restart deploy -n exastro-platform-authentication-infra
    keycloak &> \"${CMD_RESULT}\"\n# if [ $? -ne 0 ]; then\n#     logger \"ERROR\"
    \"CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra
    keycloak${LF}`cat ${CMD_RESULT}`\"\n#     logger \"ERROR\" \"rollout restart keycloak\"\n#
    \    exit 2\n# fi\n# logger \"INFO\" \"CALL : kubectl rollout restart deploy -n
    exastro-platform-authentication-infra keycloak${LF}`cat ${CMD_RESULT}`\"\n\n#\n#
    wait for restart\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\" \"**** STEP : ${STEP}
    / ${ALLSTEPS} : wait for restart ...\"\n\necho -n \"waiting ...\"\nwhile true;
    do\n    sleep 5;\n    echo -n \".\";\n    NOT_READY_COUNT=$(\n        kubectl
    get pod -n exastro-platform-authentication-infra -o json 2> /dev/null | \\\n        jq
    -r \".items[].status.containerStatuses[].ready\" 2> /dev/null | sed -e \"/true/d\"
    | wc -l\n    )\n    if [ $? -ne 0 ]; then\n        continue;\n    fi\n    if [
    ${NOT_READY_COUNT} -ne 0 ]; then\n        logger \"DEBUG\" \"STILL: containerStatuses[].ready=false\"\n
    \       continue;\n    fi\n\n    NOT_READY_COUNT=$(\n        kubectl get pod -n
    exastro-platform-authentication-infra -o jsonpath='{range .items[*]}{@.status.phase}{\"\\n\"}'
    | \\\n        sed -e \"/Running/d\" -e \"/Succeeded/d\" -e \"/^$/d\" | \\\n        wc
    -l\n    )\n    if [ $? -ne 0 ]; then\n        continue;\n    fi\n    if [ ${NOT_READY_COUNT}
    -ne 0 ]; then\n        logger \"DEBUG\" \"STILL: status.phase=Not Running/Succeeded\"\n
    \       continue;\n    fi\n\n    RESTART_AFTER_API_POD=$(kubectl get pod --selector
    \"name=authentication-infra-api\" -n exastro-platform-authentication-infra -o
    jsonpath=\"{range .items[*]}{@.metadata.name}{\\\"\\n\\\"}{end}\" 2> /dev/null)\n
    \   if [ $? -ne 0 ]; then\n        continue;\n    fi\n    if [ `echo \"${RESTART_AFTER_API_POD}\"
    | wc -l` -gt 1 ]; then\n        logger \"DEBUG\" \"STILL: RESTART_AFTER_API_POD
    COUNT > 1\"\n        continue;\n    fi\n    if [ \"${RESTART_BERFORE_API_POD}\"
    = \"${RESTART_AFTER_API_POD}\" ]; then\n        logger \"DEBUG\" \"STILL: NOT
    CHANGE API POD\"\n        continue;\n    fi\n\n    echo \"\";\n    break;\ndone;\n\nlogger
    \"DEBUG\" \"RESTART_AFTER_API_POD=${RESTART_AFTER_API_POD}\"\n\n\n#\n# Initialize
    setting keycloak api call\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\" \"****
    STEP : ${STEP} / ${ALLSTEPS} : Initialize setting keycloak call ...\"\n\n# admin
    user password change\nBEAR=$(curl -k -s \\\n    -d \"client_id=admin-cli\" \\\n
    \   -d \"username=admin\" \\\n    -d \"password=admin\" \\\n    -d \"grant_type=password\"
    \\\n    \"${REST_HOST}auth/realms/${REALM}/protocol/openid-connect/token\" | jq
    -r \".access_token\")\nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"KeyCloak
    Token get error\"\n    exit 2\nfi\n\nUSER_LIST=$(curl -X GET -s \\\n    -H \"Content-Type:
    application/json\" \\\n    -H \"Authorization: bearer ${BEAR}\" \\\n    \"${REST_HOST}auth/admin/realms/${REALM}/users\")
    \nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"KeyCloak User list get error\"\n
    \   exit 2\nfi\n\nlogger \"INFO\" \"CALL : keycloak get admin user id\"\n\n# echo
    ${USER_LIST} | jq\nUSER_ADMIN_ID=$(echo ${USER_LIST} | jq -r '.[] | select(.username
    == \"admin\") | .id')\nif [ $? -ne 0 ]; then\n    logger \"ERROR\" \"KeyCloak
    admin user id not found\"\n    exit 2\nfi\n\ncurl -X PUT -s \\\n    -H \"Content-Type:
    application/json\" \\\n    -H \"Authorization: bearer ${BEAR}\" \\\n    \"${REST_HOST}auth/admin/realms/${REALM}/users/${USER_ADMIN_ID}/reset-password\"
    \\\n    -d @- << EOF\n    {\n        \"type\": \"password\",\n        \"value\":
    \"${KEYCLOAK_ADMIN_PASSW}\",\n        \"temporary\": false\n    }\nEOF\nif [ $?
    -ne 0 ]; then\n    logger \"ERROR\" \"KeyCloak admin user password changed error\"\n
    \   exit 2\nfi\n\nkubectl patch secret -n exastro-platform-authentication-infra
    exastro-platform-authentication-infra-secret -p \"\\\n{\\\n    \\\"data\\\" :
    {\\\n        \\\"SAVE_GATEWAY_CRYPTO_PASSPHRASE\\\" : \\\"${OIDC_PASSPHRASE_B64}\\\",\\\n
    \       \\\"SAVE_KEYCLOAK_PASSWORD\\\" : \\\"${KEYCLOAK_ADMIN_PASSW_B64}\\\"\\\n
    \   }\\\n}\" &> \"${CMD_RESULT}\"\nif [ $? -ne 0 ]; then\n    logger \"ERROR\"
    \"CALL : kubectl patch secret -n exastro-platform-authentication-infra exastro-platform-authentication-infra-secret${LF}`cat
    ${CMD_RESULT}`\"\n    logger \"ERROR\" \"patch secret exastro-platform-authentication-infra-secret\"\n
    \   exit 2\nfi\n\nlogger \"INFO\" \"CALL : keycloak put admin new password\"\n\n#\n#
    Setting api call\n#\nSTEP=$(expr ${STEP} + 1)\nlogger \"INFO\" \"**** STEP : ${STEP}
    / ${ALLSTEPS} : Setting api call ...\"\n\nAPI_RESPONSE=\"/tmp/${BASENAME}-infra-setting.$$\"\n\ncurl
    \\\n    -X POST \\\n    -H  'content-type: application/json'    \\\n    -d  @-
    \\\n    -Ss \\\n    -o \"${API_RESPONSE}\" \\\n    http://authentication-infra-api.exastro-platform-authentication-infra.svc:8000/settings
    \\\n    << EOF\n    {\n        \"realm_name\": \"exastroplatform\",\n        \"realm_option\":
    {\n            \"displayName\": \"Exastro Platform\",\n            \"enabled\":
    \"True\",\n            \"registrationAllowed\": \"True\",\n            \"internationalizationEnabled\":
    true,\n            \"supportedLocales\": [ \"ja\" ],\n            \"defaultLocale\":
    \"ja\"\n        },\n        \"realm_roles\": [\n            \"epoch-user\",\n
    \           \"epoch-system\"\n        ],\n        \"groups\": [\n            {\n
    \               \"parent_group\": \"\",\n                \"group_name\": \"epoch-user\"\n
    \           },\n            {\n                \"parent_group\": \"\",\n                \"group_name\":
    \"epoch-ws-creator\"\n            }\n        ],\n        \"group_mappings\": {\n
    \           \"realm_role_mappings\": [\n                {\n                    \"role_name\":
    \"epoch-user\",\n                    \"group_name\": \"epoch-user\"\n                }\n
    \           ],\n            \"clients_role_mappings\": [\n                {\n
    \                   \"role_name\": \"ws-create\",\n                    \"client_id\":
    \"epoch-system\",\n                    \"group_name\": \"epoch-ws-creator\"\n
    \               }\n            ]\n        },\n        \"default_group_name\":
    \"epoch-user\",\n        \"users\": [\n            {\n                \"user_info\":
    {\n                    \"username\": \"epoch-admin\",\n                    \"firstName\":
    \"ユーザー\",\n                    \"lastName\": \"管理者\",\n                    \"groups\":
    [\n                        \"epoch-user\", \"epoch-ws-creator\"\n                    ],\n
    \                   \"realmRoles\": [],\n                    \"requiredActions\":
    [ \"UPDATE_PROFILE\" ],\n                    \"credentials\": [\n                        {\n
    \                           \"type\": \"password\",\n                            \"value\":
    \"password\",\n                            \"temporary\": \"True\"\n                        }\n
    \                   ],\n                    \"enabled\": \"True\"\n                },\n
    \               \"client_roles\": [\n                    {\n                        \"client_name\":
    \"realm-management\",\n                        \"roles\": [\n                            \"manage-clients\",\n
    \                           \"query-realms\",\n                            \"realm-admin\",\n
    \                           \"manage-realm\",\n                            \"create-client\",\n
    \                           \"manage-events\",\n                            \"impersonation\",\n
    \                           \"manage-users\",\n                            \"manage-authorization\",\n
    \                           \"query-groups\",\n                            \"query-users\",\n
    \                           \"manage-identity-providers\",\n                            \"query-clients\"\n
    \                       ]\n                    },\n                    {\n                        \"client_name\":
    \"broker\",\n                        \"roles\": [\n                            \"read-token\"\n
    \                       ]\n                    },\n                    {\n                        \"client_name\":
    \"account\",\n                        \"roles\": [\n                            \"delete-account\",\n
    \                           \"view-applications\",\n                            \"manage-consent\"\n
    \                       ]\n                    }\n                ]\n            }\n
    \       ],\n        \"admin_users\": [\n        ],\n        \"clients\": [\n            {\n
    \               \"client_info\": {\n                    \"id\": \"epoch-system\",\n
    \                   \"protocol\": \"openid-connect\",\n                    \"publicClient\":
    \"false\",\n                    \"redirectUris\": [\n                        \"https://${PRM_MY_HOST}:30443/oidc-redirect/\",\n
    \                       \"https://${PRM_MY_HOST}:30443/\"\n                    ],\n
    \                   \"baseUrl\": \"https://${PRM_MY_HOST}:30443/oidc-redirect/\",\n
    \                   \"webOrigins\": [],\n                    \"protocolMappers\":
    [\n                        {\n                            \"name\": \"epoch-system-client-map-role\",\n
    \                           \"protocol\": \"openid-connect\",\n                            \"protocolMapper\":
    \"oidc-usermodel-client-role-mapper\",\n                            \"config\":
    {\n                                \"id.token.claim\": \"true\",\n                                \"access.token.claim\":
    \"true\",\n                                \"claim.name\": \"epoch-role\",\n                                \"multivalued\":
    \"true\",\n                                \"userinfo.token.claim\": \"true\",\n
    \                               \"usermodel.clientRoleMapping.clientId\": \"epoch-system\"\n
    \                           }\n                        },\n                        {\n
    \                           \"name\": \"epoch-system-map-role\",\n                            \"protocol\":
    \"openid-connect\",\n                            \"protocolMapper\": \"oidc-usermodel-realm-role-mapper\",\n
    \                           \"config\": {\n                                \"id.token.claim\":
    \"true\",\n                                \"access.token.claim\": \"true\",\n
    \                               \"claim.name\": \"epoch-role\",\n                                \"multivalued\":
    \"true\",\n                                \"userinfo.token.claim\": \"true\"\n
    \                           }\n                        }\n                    ]\n
    \               },\n                \"client_roles\": [\n                    {\n
    \                       \"name\": \"ws-create\"\n                    }\n                ]\n
    \           }\n        ],\n        \"conf_template\": \"epoch-system-template.conf\",\n
    \       \"token_user\": \"admin\",\n        \"token_password\": \"${KEYCLOAK_ADMIN_PASSW}\",\n
    \       \"token_realm_name\": \"master\"\n    }\nEOF\nif [ $? -ne 0 ]; then\n
    \   logger \"ERROR\" \"Setting api call\"\n    exit 2\nfi\n\nAPI_RESULT=$(cat
    \"${API_RESPONSE}\" | jq -r \".result\")\nif [ $? -ne 0 ]; then\n    logger \"ERROR\"
    \"Setting api response:\\n`cat ${API_RESPONSE}`\"\n    logger \"ERROR\" \"Api
    Logs:\\n`kubectl logs deploy/authentication-infra-api -n exastro-platform-authentication-infra`\"\n
    \   logger \"ERROR\" \"Setting api\"\n    exit 2\nfi\nif [ \"${API_RESULT}\" !=
    \"200\" ]; then\n    logger \"ERROR\" \"Setting api response:\\n`cat ${API_RESPONSE}`\"\n
    \   logger \"ERROR\" \"Api Logs:\\n`kubectl logs deploy/authentication-infra-api
    -n exastro-platform-authentication-infra`\"\n    logger \"ERROR\" \"Setting api\"\n
    \   exit 2\nfi\n\nlogger \"INFO\" \"**** ${BASENAME} completed successfully ****\"\nexit
    0\n"
  set-proxy.sh: |
    #!/bin/bash
    #   Copyright 2021 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    BASENAME=$(basename "$0")
    CMD_RESULT="/tmp/result.$$"
    LF='
    '
    source "`dirname $0`/common-import-logger.sh" "${BASENAME}"

    logger "INFO" "START : ${BASENAME}"

    if [ $# -ne 2 ]; then
        logger "ERROR" "Usage : ${BASENAME} [https_proxy] [http_proxy]"
        logger "ERROR" "Check the parameters and try again"
        exit 1
    fi

    PRM_HTTPS_PROXY=$1
    PRM_HTTP_PROXY=$2

    logger "INFO" "PARAM PRM_HTTPS_PROXY : ${PRM_HTTPS_PROXY}"
    logger "INFO" "PARAM PRM_HTTP_PROXY  : ${PRM_HTTP_PROXY}"

    #------------------------------------------------
    logger "INFO" "START : Check kubernetes api server config"

    API_SERVER_POD_NAME=$(\
        kubectl get pod -n kube-system -o jsonpath="{range .items[*]}{@.metadata.name}{\"\t\"}{@.metadata.labels.component}{@.value}{\"\n\"}{end}" |\
        awk '$2=="kube-apiserver" {print $1}' |\
        head -n 1)

    kubectl get pod ${API_SERVER_POD_NAME} -n kube-system -o jsonpath="{range .spec.containers[*].env[*]}{@.name}{\"\t\"}{@.value}{\"\n\"}{end}" | \
    awk '\
    toupper($1)=="NO_PROXY" {\
        if(index("," $2 ",",",tekton-pipelines-webhook.tekton-pipelines.svc,")==0) {\
            exit 1;\
        }\
        if(index("," $2 ",",",tekton-triggers-webhook.tekton-pipelines.svc,")==0) {\
            exit 1;\
        }\
    }'

    if [ $? -ne 0 ]; then
        logger "ERROR" "kubernetes settings required${LF}Set the no_proxy setting on the kubernetes api server to \"tekton-pipelines-webhook.tekton-pipelines.svc\" and \"tekton-triggers-webhook.tekton-pipelines.svc\" and try again${LF}"
        exit 1
    fi

    #------------------------------------------------
    kubectl get configmap epoch-control-api-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch epoch-control-api-config"
        kubectl patch configmap epoch-control-api-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch epoch-control-api-config"
            exit 1
        fi
    fi

    kubectl get configmap proxy-setting-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch proxy-setting-config"
        kubectl patch configmap proxy-setting-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch proxy-setting-config"
            exit 1
        fi
    fi

    kubectl get configmap epoch-cicd-api-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch epoch-cicd-api-config"
        kubectl patch configmap epoch-cicd-api-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch epoch-cicd-api-config"
            exit 1
        fi
    fi

    #------------------------------------------------
    kubectl get deploy -n epoch-system -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" |\
    while read DEPLOY; do
        REFERENCE_COUNT=$(
            kubectl get deploy -n epoch-system "${DEPLOY}" -o yaml |
            sed -n -e '/epoch-control-api-config/p' -e '/proxy-setting-config/p' -e '/epoch-cicd-api-config/p' |
            wc -l
        )
        if [ ${REFERENCE_COUNT} -gt 0 ]; then
            logger "INFO" "rollout restart deploy ${DEPLOY}"
            kubectl rollout restart deploy -n epoch-system "${DEPLOY}"
            if [ $? -ne 0 ]; then
                logger "ERROR" "rollout restart deploy ${DEPLOY}"
                exit 1
            fi
        fi
    done

    exit 0
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: epoch-setting-tools-script
  namespace: epoch-system

#---- epoch-setting-tools.yaml
---
#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epoch-setting-tools
  namespace: epoch-system
spec:
  selector:
    matchLabels:
      name: epoch-setting-tools
  replicas: 1
  template:
    metadata:
      labels:
        name: epoch-setting-tools
    spec:
      volumes:
      - name: epoch-setting-tools-script
        configMap:
          name: epoch-setting-tools-script
      - name: setting-logs
        hostPath:
          path: /var/data/epoch/epoch-system/epoch-setting-tools
          type: DirectoryOrCreate
      containers:
      - name: epoch-setting-tools
        image: exastro/epoch-kube-command:0.1.5_20211026_1600
        volumeMounts:
        - mountPath: /scripts
          name: epoch-setting-tools-script
        - mountPath: /var/log/epoch
          name: setting-logs
