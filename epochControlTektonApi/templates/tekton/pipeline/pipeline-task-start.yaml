#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pipeline-task-start
  namespace: {{ param.ci_config.pipeline_namespace }}
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: start
    tekton.dev/displayName: "pipeline start"
spec:
  params:
    - name: workspace_id
    - name: pipeline_id
    - name: git_repositry_interface
    - name: git_repository_url
    - name: git_revision
    - name: git_branch
    - name: git_sender_user
    - name: container_registry_image
    - name: git_webhook_header
    - name: git_webhook_body
    - name: max_execute_build_task
    - name: pipeline_run_name
    - name: pipeline_run_uid
  workspaces:
  - name: source
    description: Holds the context and docker file
  results:
    - name: container_registry_image_tag
    - name: task_id
  steps:
    - name: pipeline-start-task
      image: exastro/epoch-api-base:0.1
      # env:
      # - name: API_TEKTON_TASK
      #   value: "http://epoch-rs-ci-result-api.epoch-system.svc:8000"
      script: |
        #!/bin/bash

        echo "[INFO] clear temporary files"

        # Delete the directory of pipeline run after 120 minutes (measures when garbage remains at the end of error)
        find $(workspaces.source.path) -mindepth 1 -type d -mmin +120 -exec rm -rf {} \;

        echo "[INFO] start pipeline initialize"

        python3 - <<EOF
        import  os
        import  requests
        import  json

        workspace_id="$(params.workspace_id)"
        req_url="http://epoch-rs-ci-result-api.epoch-system.svc:8000/workspace/{}/tekton/task".format(workspace_id)
        req_header = {
          'Content-Type': 'application/json',
        }
        req_body = json.dumps({
          'pipeline_id' :             $(params.pipeline_id),
          'git_repositry_interface' : '$(params.git_repositry_interface)',
          'git_repository_url' :      '$(params.git_repository_url)',
          'git_revision' :            '$(params.git_revision)',
          'git_branch' :              '$(params.git_branch)',
          'git_sender_user' :         '$(params.git_sender_user)',
          'container_registry_image' :'$(params.container_registry_image)',
          'git_webhook_header' :      '$(params.git_webhook_header)',
          'git_webhook_body' :        '$(params.git_webhook_body)',
          'pipeline_run_name' :       '$(params.pipeline_run_name)',
          'pipeline_run_uid' :        '$(params.pipeline_run_uid)',
        })
        response = requests.post(req_url, headers = req_header, data = req_body)

        if response.status_code != 200 and response.status_code != 201:
          raise Exception('HTTP Reseponse Error HTTP-CODE = {}'.format(response.status_code))

        response_json = json.loads(response.text)

        with open('$(results.task_id.path)', mode='w') as fp:
          fp.write(str(response_json['param']['task_id']))

        with open('$(results.container_registry_image_tag.path)', mode='w') as fp:
          fp.write(response_json['param']['container_registry_image_tag'])

        EOF

        EXIT_CODE=$?
        if [ ${EXIT_CODE} -ne 0 ]; then
          echo "[ERROR] pipeline initialize"
          exit ${EXIT_CODE}
        fi

        MAX_EXECUTE_BUILD=$(params.max_execute_build_task)

        echo "[INFO] check start execute"
        while true; do
          RUN_COUNT=$(\
            kubectl get pipelinerun -o jsonpath='{range .items[*]}{@.metadata.creationTimestamp}{"\t"}{@.metadata.uid}{"\t"}{@.metadata.name}{"\t"}{@.status.conditions[0].reason}{"\n"}' |\
            sort |\
            awk 'BEGIN {IFS="\t";sw=0;} $1==""{next;} $3=="$(params.pipeline_run_name)"{sw=1;} $4=="Running"{if(sw==0){print;}}' |\
            wc -l \
          )
          EXIT_CODE=$?
          if [ ${EXIT_CODE} -ne 0 ]; then
            echo "[ERROR] kubectl get pipelinerun exit-code: ${EXIT_CODE}"
            exit 1
          fi;
          if [ ${RUN_COUNT} -lt ${MAX_EXECUTE_BUILD} ]; then
            break;
          fi;

          RCOUNT=`expr ${RUN_COUNT} - ${MAX_EXECUTE_BUILD} + 1`
          echo "[INFO] remaining running=${RCOUNT}, wait for other builds to complete."
          sleep `expr ${RCOUNT} "*" 5`
        done;

        exit 0
