#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#{% for item in param.ci_config.pipelines %}---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-build-and-push-{{ loop.index }}
  namespace: {{ param.ci_config.pipeline_namespace }}
spec:
  workspaces:
    - name: git-source
    #{% if item.static_analysis.interface == "sonarQube" %}
    - name: sonar-settings
    #{% endif %}
    - name: dockerconfig
  params:
    - name: workspace_id
    - name: pipeline_id
    - name: git_repositry_interface
    - name: build_context_path
    - name: build_dockerfile_path
    - name: container_registry_image
    - name: git_repository_url
    - name: git_clone_revision
    - name: git_branch
    - name: git_sender_user
    - name: git_webhook_header
    - name: git_webhook_body
    - name: pipeline_run_name
    - name: pipeline_run_uid
  tasks:
    - name: task-start
      taskRef:
        name: pipeline-task-start
      workspaces:
        - name: source
          workspace: git-source
      params:
        - name: workspace_id
          value: "$(params.workspace_id)"
        - name: pipeline_id
          value: "$(params.pipeline_id)"
        - name: git_repositry_interface
          value: "$(params.git_repositry_interface)"
        - name: git_repository_url
          value: "$(params.git_repository_url)"
        - name: git_revision
          value: "$(params.git_clone_revision)"
        - name: git_branch
          value: "$(params.git_branch)"
        - name: git_sender_user
          value: "$(params.git_sender_user)"
        - name: container_registry_image
          value: "$(params.container_registry_image)"
        - name: git_webhook_header
          value: "$(params.git_webhook_header)"
        - name: git_webhook_body
          value: "$(params.git_webhook_body)"
        - name: pipeline_run_name
          value: "$(context.pipelineRun.name)"
        - name: pipeline_run_uid
          value: "$(context.pipelineRun.uid)"
    - name: task-git-clone
      taskRef:
        name: pipeline-task-git-clone
      runAfter:
        - task-start
      workspaces:
        - name: output
          workspace: git-source
      params:
        - name: url
          value: "$(params.git_repository_url)"
        - name: revision
          value: "$(params.git_clone_revision)"
        - name: subdirectory
          value: $(context.pipelineRun.name)
        - name: deleteExisting
          value: "true"
        - name: sslVerify
          value: "false"
    #{% if item.static_analysis.interface == "sonarQube" %}
    - name: task-sonarqube-scanner
      taskRef:
        name: pipeline-task-sonarqube-scanner
      runAfter:
        - task-git-clone
      workspaces:
        - name: source-dir
          workspace: git-source
        - name: sonar-settings
          workspace: sonar-settings
      params:
        - name: SONAR_HOST_URL
          value: "http://sonarqube.{{ param.ci_config.pipeline_namespace }}.svc.cluster.local:9000/"
        - name: subdirectory
          value: $(context.pipelineRun.name)
    #{% endif %}
    #{% if item.unit_test.enable == "true" %}
    - name: task-unit-test
      runAfter:
      #{% if item.static_analysis.interface == "sonarQube" %}
      - task-sonarqube-scanner
      #{% else %}
      - task-git-clone
      #{% endif %}
      taskRef:
        name: pipeline-task-unit-test-{{ loop.index }}
      workspaces:
        - name: source
          workspace: git-source
      params:
        - name: clone_source_dir
          value: "$(workspaces.source.path)/$(context.pipelineRun.name)"
    #{% endif %}
    - name: task-build-and-push
      taskRef:
        name: pipeline-task-build-and-push
      runAfter:
        #{% if item.unit_test.enable == "true" %}
        - task-unit-test
        #{% elif item.static_analysis.interface == "sonarQube" %}
        - task-sonarqube-scanner
        #{% else %}
        - task-git-clone
        #{% endif %}
      workspaces:
        - name: source
          workspace: git-source
        - name: dockerconfig
          workspace: dockerconfig
      params:
        - name: CONTEXT
          value: "$(context.pipelineRun.name)/$(params.build_context_path)"
        - name: DOCKERFILE
          value: "$(params.build_dockerfile_path)"
        - name: IMAGE
          value: "$(params.container_registry_image):$(tasks.task-start.results.container_registry_image_tag)"
    - name: task-complete
      taskRef:
        name: pipeline-task-complete
      runAfter:
        - task-build-and-push
      workspaces:
        - name: source
          workspace: git-source
      params:
        - name: workspace_id
          value: "$(params.workspace_id)"
        - name: task_id
          value: "$(tasks.task-start.results.task_id)"
        - name: subdirectory
          value: "$(context.pipelineRun.name)"
        #- name: container_registry_image_digest
        #  value: "$(tasks.task-build-and-push.results.IMAGE-DIGEST)"
{% endfor %}
